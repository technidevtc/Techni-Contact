<?php

/**
 * Messenger
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Messenger extends BaseMessenger
{
  public function setUp() {
    parent::setUp();
    $this->hasOne('Advertisers as s_adv', array(
        'local' => 'id_sender',
        'foreign' => 'id'
      )
    );
    $this->hasOne('Advertisers as r_adv', array(
        'local' => 'id_recipient',
        'foreign' => 'id'
      )
    );
    $this->hasOne('Clients as s_client', array(
        'local' => 'id_sender',
        'foreign' => 'id'
      )
    );
    $this->hasOne('Clients as r_client', array(
        'local' => 'id_recipient',
        'foreign' => 'id'
      )
    );
    $this->hasOne('BoUsers as s_user', array(
        'local' => 'id_sender',
        'foreign' => 'id'
      )
    );
    $this->hasOne('BoUsers as r_user', array(
        'local' => 'id_recipient',
        'foreign' => 'id'
      )
    );
    $this->hasMany('MessengerPjs as attachments', array(
        'local' => 'id',
        'foreign' => 'id_messenger'
      )
    );
  }

  private $lead;
  private $estimate;
  private $panier;
  private $order;
  private $supplierOrder;
  private $isNotification = false; // if true, do not update anything nor send any mail
  private $standalone = false; // wether this object had to load its linked order/estimate/others to update it or not.
                               // if it's standalone, the linked object will be updated from here
  private $copyToSender = false; // send a copy to the sender ?
  private $attachmentCtx = ""; // attachment context
  private $recipients_mail_list = ""; // recipient mail list added ad hoc
  
  public function preSave($event) {
    $this->timestamp = time();
    $this->proceedAttachments();
    
    if (!$this->isNotification) {
      
      switch ($this->context) {
        case __MSGR_CTXT_CUSTOMER_ADVERTISER_LEAD__:
          $l = $this->getLead();
          // advertiser to client
          if ($this->type_sender == __MSGR_USR_TYPE_ADV__ && $this->type_recipient == __MSGR_USR_TYPE_INT__) {
            $mail = new Email(array(
              'email' => $l['email'],
              'subject' => "Message de la société ".$l['advertiser']['nom1']." concernant votre demande de devis",
              'headers' => "From: ".$l['advertiser']['nom1']."<".$l['advertiser']['email'].">\r\n".
                           "Reply-To: ".$l['advertiser']['nom1']."<".$l['advertiser']['email'].">\r\n".
                           ($this->copyToSender ? "CC: ".$l['advertiser']['email']."\r\n" : ""),
              'template' => 'user-bop_leads-lead_answer',
              'data' => array(
                'CLIENT_FIRSTNAME' => $l['prenom'],
                'CLIENT_LASTNAME' => $l['nom'],
                'ADVERTISER_NAME' => $l['advertiser']['nom1'],
                'MESSENGER_POST' => $this->text,
                'MESSENGER_ATTACHMENTS' => $this->getAttachmentsHtml(),
                'FO_LEAD_FORM_LINK' => COMPTE_URL."lead.html?leadID=".$l['id']."&token=".$l['client']['web_id']."#account-contact-dialog_4,".$l['id'],
                'PDT_NAME' => $l['pdt_name'],
                'PDT_FO_URL' => Utils::get_pdt_fo_url($l['pdt_id'], $l['pdt_ref_name'], $l['cat_id'])
              )
            ));
            $mail->send();
          }
          // client to advertiser
          elseif ($this->type_sender == __MSGR_USR_TYPE_INT__ && $this->type_recipient == __MSGR_USR_TYPE_ADV__) {
            $mail = new Email(array(
              'email' => $l['advertiser']['email'],
              'subject' => "Message de ".$l['societe']." concernant la demande n°".$l['id'],
              'headers' => "From: Service client Techni-Contact\r\n".
                           "Reply-To: ".$l['societe']."<".$l['email'].">\r\n".
                           ($this->copyToSender ? "CC: ".$l['societe']."\r\n" : ""),
              'template' => 'partner-sfo_account-lead_question',
              'data' => array(
                'CLIENT_FIRSTNAME' => $l['prenom'],
                'CLIENT_LASTNAME' => $l['nom'],
                'CLIENT_COMPANY' => $l['societe'],
                'LEAD_ID' => $l['id'],
                'MESSENGER_POST' => $this->text,
                //'BOP_LEAD_LINK' => EXTRANET_URL."request_detail.html?id=".$l['id']."&uid=".$l['adv_web_id']
				'BOP_LEAD_LINK' => EXTRANET_URL."extranet-v3-contacts-detail.html?id=".$l['id']."&uid=".$l['adv_web_id']
              )
            ));
            $mail->send();
          }
        break;
        
        case __MSGR_CTXT_CUSTOMER_TC_ESTIMATE__:
          $e = $this->getEstimate();
          $e->client->genTempAuthToken(); // gen a temp token for use in the email
          $mailSendInfos = $e->getMailSendInfos();
          // operator to client
          if ($this->type_sender == __MSGR_USR_TYPE_BOU__ && $this->type_recipient == __MSGR_USR_TYPE_INT__) {
            $mail = new Email(array(
              'email' => $e['email'].$this->recipients_mail_list,
              'subject' => "Message concernant votre devis n°".$e['id'],
              'headers' => "From: ".$mailSendInfos['from']."\r\n".
                           "Reply-To: ".$mailSendInfos['replyTo']."\r\n",
              'template' => $mailSendInfos['tplUser'].'-bo_estimates-messenger_post',
              'data' => array(
                'CLIENT_FIRSTNAME' => $e['prenom'],
                'CLIENT_LASTNAME' => $e['nom'],
                'ESTIMATE_ID' => $e['id'],
                'MESSENGER_POST' => $this->text,
                'MESSENGER_ATTACHMENTS' => $this->getAttachmentsHtml(),
                'FO_CUSTOMER_ACCOUNT_URL' => COMPTE_URL,
                'FO_ESTIMATE_CONTACT_FORM_LINK' => COMPTE_URL."pdfestimate.html?estimateID=".$e['web_id']."&token=".$e['client']['web_id']."#account-contact-dialog_3,".$e['id']//COMPTE_URL."contact-form.html?type=3&id=".$e['id']
              )
            ));
            $mail->send();
            $e->waiting_info_status &= ~__MSGR_CTXT_CUSTOMER_TC_ESTIMATE__;  // removing flag
            if ($this->standalone)
              $e->save();
          }
          // client to operator - mail sent in /secure/fr/compte/contact-form.html
          elseif ($this->type_sender == __MSGR_USR_TYPE_INT__ && $this->type_recipient == __MSGR_USR_TYPE_BOU__) {
            $e->waiting_info_status |= __MSGR_CTXT_CUSTOMER_TC_ESTIMATE__;  // adding flag
            if ($this->standalone)
              $e->save();
          }
          break;
          
        case __MSGR_CTXT_CUSTOMER_TC_CMD__:
          $o = $this->getOrder();
          $o->client->genTempAuthToken(); // gen a temp token for use in the email
          $mailSendInfos = $o->getMailSendInfos('MessengerPost');
          // operator to client
          if ($this->type_sender == __MSGR_USR_TYPE_BOU__ && $this->type_recipient == __MSGR_USR_TYPE_INT__) {
            $mail = new Email(array(
              'email' => $o['email'].$this->recipients_mail_list,
              'subject' => $mailSendInfos['subject'],
              'headers' => $mailSendInfos['headers'],
              'template' => $mailSendInfos['template'],
              'data' => array(
                'FO_URL' => $mailSendInfos['FO_URL'],
                'CLIENT_FIRSTNAME' => $o['prenom'],
                'CLIENT_LASTNAME' => $o['nom'],
                'ORDER_ID' => $mailSendInfos['ORDER_ID'],
                'MESSENGER_POST' => $this->text,
                'MESSENGER_ATTACHMENTS' => $this->getAttachmentsHtml(),
                'FO_CUSTOMER_ACCOUNT_URL' => COMPTE_URL,
                'FO_ORDER_CONTACT_FORM_LINK' => COMPTE_URL."order.html?orderID=".$o['id']."&token=".$o['client']['web_id']."#account-contact-dialog_1,".$o['id']//COMPTE_URL."contact-form.html?type=1&id=".$o['id']
              )
            ));
            $mail->send();
            $o->waiting_info_status &= ~__MSGR_CTXT_CUSTOMER_TC_CMD__;  // removing flag
            if ($this->standalone)
              $o->save();
          }
          // client to operator - mail sent in /secure/fr/compte/contact-form.html
          elseif ($this->type_sender == __MSGR_USR_TYPE_INT__ && $this->type_recipient == __MSGR_USR_TYPE_BOU__) {
            $o->waiting_info_status |= __MSGR_CTXT_CUSTOMER_TC_CMD__;  // adding flag
            if ($this->standalone)
              $o->save();
          }
          break;
          
        case __MSGR_CTXT_SUPPLIER_TC_ORDER__:
          $so = $this->getSupplierOrder();
          // operator to supplier
          if ($this->type_sender == __MSGR_USR_TYPE_BOU__ && $this->type_recipient == __MSGR_USR_TYPE_ADV__) {
		  
		   //Commented on 18/11/2014 to include the autoconnect !
		   /*$mail = new Email(array(
              'email' => $so['supplier']['email'],
              'subject' => "Information sur commande n ".$so['rid'],
              'headers' => "From: Service Achat Techni-Contact <achat@techni-contact.com>\r\n".
                           "Reply-To: Service Achat Techni-Contact <achat@techni-contact.com>\r\n",
              'template' => 'partner-bo_messagerie-answer_supplier',
              'data' => array(
                'CMD_NUMBER' => $so['rid'],
                'MESSAGE_CONTENT' => $this->text,
                'MESSAGE_ATTACHMENTS' => $this->getAttachmentsHtml(),
                'LIEN_CMD' => EXTRANET_URL."commande.html?idCommande=".$so['rid']
              )
            ));*/
			
			
			//Code changed on 18/11/2014 to include the autoconnect !
			$user_uid	= $this->getSupplier_uid($so['rid']);
			//'LIEN_CMD' => EXTRANET_URL."commande.html?idCommande=".$so['rid']
			
			$mail = new Email(array(
              'email' => $so['supplier']['email'],
              'subject' => "Information sur commande n ".$so['rid'],
              'headers' => "From: Service Achat Techni-Contact <achat@techni-contact.com>\r\n".
                           "Reply-To: Service Achat Techni-Contact <achat@techni-contact.com>\r\n".
						   "Bcc:  <achat@techni-contact.com> \r\n",
              'template' => 'partner-bo_messagerie-answer_supplier',
              'data' => array(
                'CMD_NUMBER' => $so['rid'],
                'MESSAGE_CONTENT' => $this->text,
                'MESSAGE_ATTACHMENTS' => $this->getAttachmentsHtml(),
                'LIEN_CMD' => EXTRANET_URL."commande.html?idCommande=".$so['rid']."&uid=".$user_uid['webpass']
              )
            ));
			
			
			
            $mail->send();
            $so->order->waiting_info_status &= ~__MSGR_CTXT_SUPPLIER_TC_ORDER__;  // removing flag
            if ($this->standalone)
              $so->order->save();
          }
          // supplier to operator
          elseif ($this->type_sender == __MSGR_USR_TYPE_ADV__ && $this->type_recipient == __MSGR_USR_TYPE_BOU__) {
            $mail = new Email(array(
              'email' => "achat@techni-contact.com",
              'subject' => "Message du fournisseur ".$so['supplier']['nom1']." concernant l'ordre n°".$so['rid'],
              'headers' => "From: ".$so['supplier']['nom1']."<".$so['supplier']['email'].">\r\n".
                           "Reply-To: ".$so['supplier']['nom1']."<".$so['supplier']['email'].">\r\n",
              'template' => 'partner-bo_messagerie-TC_info',
              'data' => array(
                'EXP_DATE' => date('d/m/Y - H:i:s'),
                'SUPPLIER_NAME' => $so['supplier']['nom1'],
                'CMD_NUMBER' => $so['rid'],
                'LIEN_CMD' => ADMIN_URL.'supplier-orders/supplier-order-detail.php?id='.$so['id'],
                'MESSAGE_CONTENT' => $this->text
              )
            ));
            $mail->send();
            $so->order->waiting_info_status |= __MSGR_CTXT_SUPPLIER_TC_ORDER__;  // adding flag
            if ($this->standalone)
              $so->order->save();
          }
          break;
          
        case __MSGR_CTXT_CUSTOMER_TC_DEVIS_PDF__:
          $o = $this->getPdfEstimate();
          // operator to client
          if ($this->type_sender == __MSGR_USR_TYPE_BOU__ && $this->type_recipient == __MSGR_USR_TYPE_INT__) {
            $mail = new Email(array(
              'email' => $o['email'],
              'subject' => "Message concernant votre devis  n°".$o['id'],
              'headers' => "From: Techni-Contact - Service commercial <sav@techni-contact.com>\r\n".
                           "Reply-To: Service client Techni-Contact <sav@techni-contact.com>\r\n",
              'template' => 'user-bo_devispdf-messenger_post',
              'data' => array(
                'CLIENT_FIRSTNAME' => $o['prenom'],
                'CLIENT_LASTNAME' => $o['nom'],
                'ORDER_ID' => $o['id'],
                'MESSENGER_POST' => $this->text,
                'MESSENGER_ATTACHMENTS' => $this->getAttachmentsHtml(),
                'FO_ORDER_CONTACT_FORM_LINK' => COMPTE_URL."contact-form.html?type=2&id=".$o['id']
              )
            ));
            $mail->send();
            //$o->waiting_info_status &= ~__MSGR_CTXT_CUSTOMER_TC_DEVIS_PDF__;  // removing flag
            if ($this->standalone)
              $o->save();
          }
          // client to operator - mail sent in /secure/fr/compte/contact-form.html
          elseif ($this->type_sender == __MSGR_USR_TYPE_INT__ && $this->type_recipient == __MSGR_USR_TYPE_BOU__) {
            //$o->waiting_info_status |= __MSGR_CTXT_CUSTOMER_TC_DEVIS_PDF__;  // adding flag
            if ($this->standalone)
              $o->save();
          }
          break;
      }
    }
  }
  
  // to avoid some sql query if we already have the object, and avoid some infinite loops
  public function setLead($l) {
    $this->lead = $l;
    return $this;
  }
  public function setEstimate($e) {
    $this->estimate = $e;
    return $this;
  }
  public function setPanier($p) {
    $this->panier = $p;
    return $this;
  }
  public function setOrder($o) {
    $this->order = $o;
    return $this;
  }
  public function setSupplierOrder($so) {
    $this->supplierOrder = $so;
    return $this;
  }
  
  public function setIsNotification($v) {
    $this->isNotification = !!$v;
    return $this;
  }
  public function setStandalone($v) {
    $this->standalone = !!$v;
    return $this;
  }
  public function sendCopyToSender($v = true) {
    $this->copyToSender = !!$v;
    return $this;
  }
  public function setAttachmentCtx($v) {
    $this->attachmentCtx = (string)$v;
    return this;
  }
  public function setMultipleRecipientsMails($mailList = null){
    if(!empty($mailList)){
      $listDesti = explode(', ', $mailList);
      foreach($listDesti as $mailDesti)
        if(preg_match('/^[[:alnum:]]([-_.]?[[:alnum:]])*@[[:alnum:]]([-_.]?[[:alnum:]])*\.([a-z]{2,4})$/', $mailDesti))
          $testedListDesti[] = $mailDesti;
    }
    if(!empty($testedListDesti))
      $listdestimultiple = implode (', ', $testedListDesti);

    $listDestiMultiple = !empty($listdestimultiple) ? ', '.$listdestimultiple : '';

    $this->recipients_mail_list = $listDestiMultiple;
    return this;
  }
  
  // get the lead with the product's infos, eventually getting them from it's parent lead
  public function getLead() {
    if (isset($this->lead) && get_class($this->lead) == 'Contacts') {
      $l = $this->lead;
    } else {
      $l = Doctrine_Query::create()
        ->select('l.id,
                  l.nom,
                  l.prenom,
                  l.societe,
                  l.email,
                  c.id,
                  c.web_id,
                  a.nom1,
                  a.email,
                  eu.webpass AS adv_web_id,
                  IFNULL(p.id, pp.id) AS pdt_id,
                  IFNULL(pfr.name, ppfr.name) AS pdt_name,
                  IFNULL(pfr.ref_name, ppfr.ref_name) AS pdt_ref_name,
                  IFNULL(lc.id, 1) AS cat_id')
        ->from('Contacts l')
        ->innerJoin('l.client c')
        ->innerJoin('l.advertiser a')
        ->innerJoin('a.extranet_user eu')
        ->leftJoin('l.category lc')
        ->leftJoin('l.product p')
        ->leftJoin('p.product_fr pfr')
        ->leftJoin('l.primary_lead pl')
        ->leftJoin('pl.product pp')
        ->leftJoin('pp.product_fr ppfr')
        ->where('l.id = ?', $this->reference_to)
        ->fetchOne();
        if (!$l)
          throw new Exception("Le lead n°".$this->reference_to." n'existe pas.");
      $this->lead = $l;
      $this->standalone = true;
    }
    return $l;
  }
  public function getEstimate() {
    if (isset($this->estimate) && get_class($this->estimate) == 'Estimate') {
      $e = $this->estimate;
    } else {
      $e = Doctrine_Query::create()
        ->select('e.id, e.nom, e.prenom, e.email, e.waiting_info_status, uu.name, uu.email')
        ->from('Estimate e')
        ->leftJoin('e.updated_user uu')
        ->where('e.id = ?', $this->reference_to)
        ->fetchOne();
        if (!$e)
          throw new Exception("Le devis n°".$this->reference_to." n'existe pas.");
      $this->estimate = $e;
      $this->standalone = true;
    }
    return $e;
  }
  public function getPdfEstimate() {
    if (isset($this->panier) && get_class($this->panier) == 'Panier') {
      $e = $this->panier;
    } else {
      /*
       * $res = $db->query("
		select " . implode(",", array_keys(self::$fields)) . "
		from paniers
		where estimate != 0 " . (!empty($customerID) ? "and idClient = " . $customerID : "") . "
		" . (!empty($order) ? "order by " . $order . " " . ($way != "asc" ? "desc" : "asc") : ""), __FILE__, __LINE__);
       */
      $p = Doctrine_Query::create()
        //->select('p.id, p.nom, p.prenom, p.email, p.waiting_info_status, uu.email')
        ->select()
        ->from('Paniers p')
        //->leftJoin('p.updated_user uu')
        ->where('p.estimate = ?', $this->reference_to)
        ->fetchOne();
        if (!$p)
          throw new Exception("Le devis n°".$this->reference_to." n'existe pas.");
      $this->standalone = true;
    }
    return $p;
  }
  public function getOrder() {
    if (isset($this->order) && get_class($this->order) == 'Order') {
      $o = $this->order;
    } else {
      $o = Doctrine_Query::create()
        ->select('o.id, o.nom, o.prenom, o.email, o.waiting_info_status, c.web_id')
        ->from('Order o')
        ->innerJoin('o.client c')
        ->where('o.id = ?', $this->reference_to)
        ->fetchOne();
        if (!$o)
          throw new Exception("La commande n°".$this->reference_to." n'existe pas.");
      $this->order = $o;
      $this->standalone = true;
    }
    return $o;
  }
  public function getSupplierOrder() {
    if (isset($this->supplierOrder) && get_class($this->supplierOrder) == 'SupplierOrder') {
      $so = $this->supplierOrder;
    } else {
      $so = Doctrine_Query::create()
        ->select('so.order_id, so.sup_id, o.waiting_info_status, s.nom1, s.email')
        ->from('SupplierOrder so')
        ->innerJoin('so.order o')
        ->innerJoin('so.supplier s')
        ->where('so.id = ?', $this->reference_to)
        ->fetchOne();
        if (!$so)
          throw new Exception("L'ordre fournisseur n°".$this->reference_to." n'existe pas.");
      $this->supplierOrder = $so;
      $this->standalone = true;
    }
    return $so;
  }
  
 //Function declared on 18/11/2014 to get the uid 
   public function getSupplier_uid($rid) {
		
		$new_order_id	 = explode('-',$rid);
		/*$so_uid = Doctrine_Query::create()
		->select('o.id, exu.webpass')
        ->from('Order o, main_supplier a, extranet_user exu')
        ->where('o.id= ? AND a.id=o.main_sup_id AND exu.id=a.id', $new_order_id[1])
        ->fetchOne();*/
		
		$so_uid = Doctrine_Query::create()
		->select('o.id, a.id, a.nom1, extranet_user.id, extranet_user.webpass as webpass')
        ->from('Order o')
		->leftJoin('o.main_supplier a ON o.main_sup_id=a.id ')
		->leftJoin('a.extranet_user extranet_user ON a.id=extranet_user.id')
        ->where('o.id= ? ', $new_order_id[1])
        ->fetchOne();
		
        if (!$so_uid)
          throw new Exception("UID inexistant ! ".$rid." ** ".$new_order_id[1]);
		  
		 //echo($so_uid['id']);
    return $so_uid;
  }
  
  private function getAttachmentsHtml() {
    $attachments = "";
    if (!empty($this->attachments)) {
      $attachments = "<br />\r\nDocuments joints à ce message :";
      foreach ($this->attachments as $attachment) {
        $f = $attachment->file;
        $filename = !empty($f->alias_filename) ? $f->alias_filename : $f->filename;
        $attachments .= "<br />\r\n- <i>".$filename.".".$f->extension."</i> : <a href=\"".BO_UPLOAD_DIR."messenger/".$f->filename.".".$f->extension."\" target=\"_blank\">ouvrir le fichier</a>";
      }
      $attachments .= "<br />\r\n";
    }
    return $attachments;
  }

  private function proceedAttachments() {
    global $uploadContextData;
    global $upCtxPre;
    
    if (!empty($this->attachmentCtx)) {
      $files = Doctrine_Query::create()
          ->select('*')
          ->from('UploadedFiles')
          ->where('item_id = ?', $this->reference_to)
          ->andWhere('context = ?', $upCtxPre.$this->attachmentCtx)
          ->execute();
      
      if (count($files)) {
        if (!$this->id)
          $this->genFreeId(); // make sure to have a definitive id
        
        $filenum = 1;
        foreach ($files as $k => $file) {
          $old_fn = $uploadContextData[$this->attachmentCtx]['dir'].$file->filename;
          $old_ffn = ADMIN_UPLOAD_DIR.$old_fn.'.'.$file->extension;
          $new_fn = 'pjmess-com-'.$this->id.'-'.$filenum;
          $new_ffn = ADMIN_UPLOAD_DIR.'messenger/'.$new_fn.'.'.$file->extension;
          
          if (@rename($old_ffn, $new_ffn)) {
            $file->context = 'bo-pjmess';
            $file->item_id = $this->id;
            $file->filename = $new_fn;
            $filenum++;
          } else {
            //echo $old_ffn."\r\n".$new_ffn."\r\n";
            $files->remove($k);
          }
        }
        
        foreach ($files as $file) {
          $mpjs = new MessengerPjs();
          $mpjs->file = $file;
          $this->attachments[] = $mpjs;
        }
      }
    }
  }
  
  public static function getConversation($context, $id_part, $reference_to, $hydrationMode = 'array', $url_side = 'BO') {
    $sever_side = $url_side == 'FO' ? URL.'ressources/pj/' : BO_UPLOAD_DIR ;
    $q = Doctrine_Query::create()
      ->select('m.*, 
              (CASE m.type_sender
                WHEN 1 THEN s_a.nom1
                WHEN 2 THEN IF(s_c.societe=\'\',CONCAT_WS(\' \',s_c.nom,s_c.prenom),s_c.societe)
                WHEN 3 THEN s_u.login
              END) as sender_name,
              (CASE m.type_recipient
                WHEN 1 THEN r_a.nom1
                WHEN 2 THEN IF(r_c.societe=\'\',CONCAT_WS(\' \',r_c.nom,r_c.prenom),r_c.societe)
                WHEN 3 THEN r_u.login
              END) as recipient_name,
              al.id,
              alf.id,
              alf.filename,
              alf.alias_filename,
              alf.extension,
              CONCAT(\''.str_replace('.','\.',$sever_side).'messenger/\',alf.filename,\'.\',alf.extension) AS url,
              CONCAT(IF(alf.alias_filename=\'\',alf.filename,alf.alias_filename),\'.\',alf.extension) AS shown_name')
      ->from('Messenger m')
      ->leftJoin('m.s_adv s_a')
      ->leftJoin('m.r_adv r_a')
      ->leftJoin('m.s_client s_c')
      ->leftJoin('m.r_client r_c')
      ->leftJoin('m.s_user s_u')
      ->leftJoin('m.r_user r_u')
      ->leftJoin('m.attachments al')
      ->leftJoin('al.file alf')
      ->where('(m.context = ? AND (m.id_sender = ? OR m.id_recipient = ?)) OR (m.context & ? AND (m.type_recipient = ? OR m.type_sender = ?))', array($context, $id_part, $id_part, $context, __MSGR_USR_TYPE_BOU__, __MSGR_USR_TYPE_BOU__))
      ->andWhere('m.reference_to = ?', $reference_to)
      ->orderBy('m.timestamp desc');
    switch ($hydrationMode) {
      case 'fetchOne':
        $data = $q->fetchOne();
        break;
      case 'scalar':
        $data = $q->execute(array(), Doctrine_Core::HYDRATE_SCALAR);
        break;
      case 'record':
        $data = $q->execute();
        break;
      case 'array':
      default:
        $data = $q->fetchArray();
    }

    return $data;
  }
  
  public static function closeConversation($context, $reference_to) {
    switch ($context) {
      case __MSGR_CTXT_CUSTOMER_TC_ESTIMATE__:
        $rows = Doctrine_Query::create()
          ->update('Estimate')
          ->set('waiting_info_status', 'waiting_info_status & '.~__MSGR_CTXT_CUSTOMER_TC_ESTIMATE__)
          ->where('id = ?', $reference_to)
          ->execute();
        break;
      case __MSGR_CTXT_CUSTOMER_TC_CMD__:
        $rows = Doctrine_Query::create()
          ->update('Order')
          ->set('waiting_info_status', 'waiting_info_status & '.~__MSGR_CTXT_CUSTOMER_TC_CMD__)
          ->where('id = ?', $reference_to)
          ->execute();
        break;
      case __MSGR_CTXT_SUPPLIER_TC_ORDER__:
        // joined dql update queries is supported in Doctrine 2+ only
        $order_id = Doctrine_Query::create()
          ->select('order_id')
          ->from('SupplierOrder')
          ->where('id = ?', $reference_to)
          ->execute(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR);
        $rows = Doctrine_Query::create()
          ->update('Order')
          ->set('waiting_info_status', 'waiting_info_status & '.~__MSGR_CTXT_SUPPLIER_TC_ORDER__)
          ->where('id = ?', $order_id)
          ->execute();
        break;
    }
    
    return 1;
    
  }
   
  public static function postMessage($data, $attachmentCtx, $listMailsDesti = null) {
    
    $m = new Messenger();
    if($listMailsDesti)
      $m->setMultipleRecipientsMails ($listMailsDesti);
    $m->fromArray($data);
    $m->setAttachmentCtx($attachmentCtx);
    $m->save();
    return $m->toArray();
  }
  
}
