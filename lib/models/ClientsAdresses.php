<?php

/**
 * ClientsAdresses
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ClientsAdresses extends BaseClientsAdresses
{
  public function setTableDefinition() {
    parent::setTableDefinition();
    $this->setAttribute(Doctrine_Core::ATTR_VALIDATE, VALIDATE_ALL);
    $this->setColumnOptions(array(
        'nom_adresse',
        'titre',
        'nom',
        'prenom',
        'tel1',
        'adresse',
        'cp',
        'ville',
        'pays'
      ), array(
        'notblank' => true
      )
    );
    $this->setColumnOption('num', 'range', array(0,CLIENT_MAX_ADDRESS_BY_TYPE-1));
    $this->setColumnOption('type_adresse', 'range', array_keys(self::$typeList));
  }
  
  public function setUp() {
    parent::setUp();
    $this->hasOne('Clients as client', array(
        'local' => 'client_id',
        'foreign' => 'id'
      )
    );
    $this->hasMany('Paniers as cart_delivery', array(
        'local' => 'id',
        'foreign' => 'delivery_address_id'
      )
    );
    $this->hasMany('Paniers as cart_billing', array(
        'local' => 'id',
        'foreign' => 'billing_address_id'
      )
    );
  }
  
  public function preInsert() {
    $this->create_time = $this->timestamp = time();
  }
  
  public function preUpdate() {
    if ($this->isModified())
      $this->timestamp = time();
  }
  
  public static function orderByType($addressList) {
    $addressesByType = self::$typeList; // declare array to make sure the js will always have every indexes
    foreach ($addressesByType as $abti => $abt)
      $addressesByType[$abti] = array(
        'list' => array(),
        'length' => 0
      );
    foreach ($addressList as $a)
      $addressesByType[$a['type_adresse']]['list'][$a['id']] = $a;
    foreach ($addressesByType as $abti => $abt)
      $addressesByType[$abti]['length'] = count($addressesByType[$abti]['list']);
    return $addressesByType;
  }
  
  const TYPE_DELIVERY = 0;
  const TYPE_BILLING = 1;
  public static $typeList = array(
    self::TYPE_DELIVERY => "livraison",
    self::TYPE_BILLING => "facturation"
  );
  public static function getTypeText($const) {
    return isset(self::$typeList[$const]) ? self::$typeList[$const] : "";
  }
  
}