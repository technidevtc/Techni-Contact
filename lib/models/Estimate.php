<?php

/**
 * Estimate
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Estimate extends BaseEstimate
{
  public function setUp() {
    parent::setUp();
    $this->hasMany('EstimateLine as lines', array(
        'local' => 'id',
        'foreign' => 'estimate_id',
        'cascade' => array('delete')
      )
    );
    $this->hasOne('Clients as client', array(
        'local' => 'client_id',
        'foreign' => 'id'
      )
    );
    $this->hasOne('Advertisers as main_supplier', array(
        'local' => 'main_sup_id',
        'foreign' => 'id'
      )
    );
    $this->hasOne('Contacts as lead', array(
        'local' => 'lead_id',
        'foreign' => 'id'
      )
    );
    $this->hasOne('Order as order', array(
        'local' => 'order_id',
        'foreign' => 'id'
      )
    );
    $this->hasOne('Invoice as invoice', array(
        'local' => 'invoice_id',
        'foreign' => 'id'
      )
    );
    $this->hasOne('BoUsers as created_user', array(
        'local' => 'created_user_id',
        'foreign' => 'id'
      )
    );
    $this->hasOne('BoUsers as updated_user', array(
        'local' => 'updated_user_id',
        'foreign' => 'id'
      )
    );
  }
  
  public function construct() {
    $this->mapValue('stotal_ht', 0);
    $this->mapValue('total_tva', 0);
    $this->mapValue('fdp_tva', 0);
    $this->mapValue('type_text', "");
    $this->mapValue('recipients_mail_list', "");
  }
  
  public function postHydrate($event) {
    $data = $event->data;
    $data['stotal_ht'] = $data['total_ht'] - $data['fdp_ht'];
    $data['total_tva'] = $data['total_ttc'] - $data['total_ht'];
    $data['fdp_tva'] = $data['fdp_ttc'] - $data['fdp_ht'];
    $data['type_text'] = self::getTypeText($data['type']);
    $event->data = $data;
  }
  
  public function preInsert($event) {
    global $user;
    $this->created = time();
    if ($user instanceof BoUser)
      $this->created_user_id = $user->id;
  }
  
  protected $noCascadingRelations;
  
  public function preSave() {
    global $user;
    
    $this->updated = time();
    
    if (empty($this->web_id))
      $this->genId('web_id');
    
    if ($user instanceof BoUser) {
      $this->updated_user_id = $user->id;
      if ($this->updated_user_id != $user->id) {
        $this->updated_user_id = $user->id;
        if (isset($this->updated_user))
          $this->refreshRelated('updated_user');
      }
    }
    
    // update suppliers orders when at least one of the lines was modified
    if ($this->lines->isModified()) {
      $this->updateSupplierPart();
    }
    
    // prevents from updating user account from here
    $this->noCascadingRelations = array();
    if (isset($this->created_user)) $this->noCascadingRelations[] = 'created_user';
    if (isset($this->updated_user)) $this->noCascadingRelations[] = 'updated_user';
    foreach ($this->noCascadingRelations as $relation)
      $this->clearRelated($relation);
  }
  
  public function postSave($event) {
    foreach ($this->noCascadingRelations as $relation)
      $this->refreshRelated($relation);
  }
  
  public function updateStatus($status, $listMailsDesti = null) {
    $this->status = $status;
    switch ($this->status) {
      case self::STATUS_SENT:
        // update parent supplier lead
        if (!empty($this->lead_id)) {
          $l1 = Doctrine_Query::create()
            ->select('email, FROM_UNIXTIME(timestamp,\'%Y%j\') as daytime')
            ->from('Contacts')
            ->where('id = ?', $this->lead_id)
            ->fetchOne(array(), Doctrine_core::HYDRATE_ARRAY);
          $lsd = Doctrine_Query::create()
            ->update('Contacts')
            ->set('processing_status', '?', __LEAD_P_STATUS_PROCESSED__)
            ->set('id_user_processed', '?', $this->updated_user->id)
            ->set('processing_time', '?', time())
            ->where('email = ?', $l1['email'])
            ->andWhere('FROM_UNIXTIME(timestamp,\'%Y%j\') = ?', $l1['daytime'])
            ->execute();
        }
        $this->updated_mail_sent_pdf = time();
        $in = new InternalNotes();
        $in->id_reference = $this->id;
        $in->context = InternalNotes::ESTIMATE;
        $in->content = "Devis n°".$this->id." envoyé au client le ".date('d/m/Y H:i:s', $this->updated)." par ".$this->updated_user->login;
        $in->save();
        $this->sendMail($listMailsDesti);
        break;
        
      case self::STATUS_UPDATED:
        $this->updated_mail_sent_pdf = time();
        $in = new InternalNotes();
        $in->id_reference = $this->id;
        $in->context = InternalNotes::ESTIMATE;
        $in->content = "Devis mis à jour et renvoyé au client le ".date('d/m/Y H:i:s', $this->updated)." par ".$this->updated_user->login;
        $in->save();
        $this->sendMail($listMailsDesti, true);
        break;
        
      case self::STATUS_WON:
        $in = new InternalNotes();
        $in->id_reference = $this->id;
        $in->context = InternalNotes::ESTIMATE;
        $in->content = "Affaire n°".$this->id." gagnée par ". $this->created_user->login ." le ".date('d/m/Y H:i:s');
        $in->save();
        break;
    }
    $this->save();
  }
  
  public function updateSupplierPart() {
    // compute some vars
    $so_infos = array();
    foreach ($this->lines as $line) {
      if (!isset($so_infos[$line->sup_id]))
        $so_infos[$line->sup_id] = array('total_ht' => 0, 'total_a_ht' => 0, 'total_a_ttc' => 0);
      $so_infos[$line->sup_id]['total_ht'] += $line->total_ht + $line->et_total_ht;
    }
    
    // set the main supplier id
    $main_sup_id = 0;
    $max_total_ht = 0;
    foreach($so_infos as $sup_id => $infos)
      if ($infos['total_ht'] > $max_total_ht)
        $main_sup_id = $sup_id;
    $this->main_sup_id = $main_sup_id;
  }
  
  public function updateWithLines($data) {
    
    if ($this->status != self::STATUS_LOST) {
      // only update supplier comment
      if (!empty($data['lines'])) {
        foreach ($data['lines'] as &$line) {
          if (!empty($line['pdt_ref_id'])) {
            $line['pdt_ref']['label_long'] = $line['desc'];
          } else {
            $line['pdt_ref'] = array(
              'idProduct' => $line['pdt_id'],
              'sup_id' => $line['sup_id'],
              'label' => $line['desc'],
              'label_long' => $line['desc'],
              'refSupplier' => $line['sup_ref'],
              'price' => $line['pu_ht'],
              'price2' => $line['pau_ht'],
              'ecotax' => $line['et_ht'],
              'marge' => round(1 - $line['pau_ht'] / $line['pu_ht'],3),
              'vpc' => $line['vpc']
            );
          }
        }
      }
      
      $this->synchronizeWithArray($data);
      
      $this->calculate();
      $this->save();
    }
    
    return $this->toArray();
  }
  
  public function calculate() {
    $hasTva = !in_array($this->activity, self::$activityNoTvaList);
    $this->stotal_ht = $this->total_tva = 0;
    foreach ($this->lines as $line) {
      
      // rounding entries to be sure
      $line->pau_ht = round($line->pau_ht, 6);
      $line->pu_ht = round($line->pu_ht, 6);
      $line->et_ht = round($line->et_ht, 6);
      $line->quantity = round($line->quantity);
      $line->total_a_ht = $line->pau_ht * $line->quantity;
      $line->total_ht_pre = $line->pu_ht * $line->quantity;
      
      $dpMul = (100-($line->discount+$line->promotion))/100;
      $tvaMul = Tva::getRate($line->tva_code)/100; // using Tva:getRate to avoid sql queries fetching the tva relation
      
      $line->total_ht = round($line->total_ht_pre * $dpMul, 6);
      $line->total_tva = $hasTva ? round($line->total_ht_pre * $tvaMul * $dpMul, 6) : 0;
      $line->total_ttc = round($line->total_ht + $line->total_tva, 6);
      $line->et_total_ht = $line->et_ht * $line->quantity;
      
      $et_total_tva = round($line->et_total_ht * $tvaMul, 6);
      
      $this->stotal_ht += $line->total_ht + $line->et_total_ht;
      $this->total_tva += $line->total_tva + $et_total_tva;
    }
    
    $this->fdp_ht = $this->type == self::TYPE_NORMAL ? round($this->fdp_ht, 6) : 0; // rounding fdp entry or 0 if ad hoc
    $this->fdp_tva = $hasTva ? round($this->fdp_ht * Tva::getRate(1)/100, 6) : 0;
    $this->fdp_ttc = $this->fdp_ht + $this->fdp_tva;
    
    $this->total_ht = round($this->stotal_ht + $this->fdp_ht, 2);
    $this->total_tva = round($this->total_tva + $this->fdp_tva, 2);
    $this->total_ttc = $this->total_ht + $this->total_tva;
  }
  
  public function cancel() {
    $this->status = self::STATUS_LOST;
    $this->save();
    return 1;
  }
  
  public function setMultipleRecipients($mailList = null){

      if(!empty($mailList)){
        $listDesti = explode(', ', $mailList);
        foreach($listDesti as $mailDesti)
          if(preg_match('/^[[:alnum:]]([-_.]?[[:alnum:]])*@[[:alnum:]]([-_.]?[[:alnum:]])*\.([a-z]{2,4})$/', $mailDesti))
            $testedListDesti[] = $mailDesti;
      }
      if(!empty($testedListDesti))
        $listdestimultiple = implode (', ', $testedListDesti);
      
      $listDestiMultiple = !empty($listdestimultiple) ? ', '.$listdestimultiple : '';

      $this->recipients_mail_list = $listDestiMultiple;
  }
  
  public function resend($listMailsDesti = null) {
    if ($this->status != self::STATUS_IN_PROCESS) {
      $in = new InternalNotes();
      $in->id_reference = $this->id;
      $in->context = InternalNotes::ESTIMATE;
      $in->content = "Devis n°".$this->id." de ".$this->total_ht." euros renvoyé au client le ".date('d/m/Y H:i:s');
      $in->save();
	
      $this->sendMail($listMailsDesti);
      return 1;
    }
    return 0;
  }
  
  public function getMailSendInfos() {
    $mailSendInfos = array();
    switch ($this->website_origin) {
      case "MOB":
        $mailSendInfos['siteName'] = "Mobaneo";
        $mailSendInfos['from'] = "Mobaneo - Albert AMSELLEM <a.amsellem@mobaneo.com>";
        $mailSendInfos['replyTo'] = "Service clients - Mobaneo <a.amsellem@mobaneo.com>";
        $mailSendInfos['tplUser'] = "user_mob";
        break;
      case "TC":
      default:
        $mailSendInfos['siteName'] = "Techni-Contact";
        $mailSendInfos['from'] = "Techni-Contact - ".$this->updated_user->name." <".$this->updated_user->email.">";
        $mailSendInfos['replyTo'] = "Service clients - Techni-Contact <".$this->updated_user->email.">";
        $mailSendInfos['tplUser'] = "user";
    }
    return $mailSendInfos;
  }
  
  private function sendMail($listMailsDesti = null, $isUpdate = false) {
    global $user;
    if ($listMailsDesti)
      $this->setMultipleRecipients ($listMailsDesti);
    $this->updated_mail_sent_pdf = time();
    $this->save();
    
    $mail = new Email();
    $mail->email = $this->email.$this->recipients_mail_list;
    switch ($this->associated_gsc) {
      case self::ASSOCIATED_GSC_NONE:
      case self::ASSOCIATED_GSC_TC_MAIL_ORDER:
      case self::ASSOCIATED_GSC_MOBANEO_MAIL_ORDER:
        $mailSendInfos = $this->getMailSendInfos();
        $mail->headers = "From: ".$mailSendInfos['from']."\nReply-To: ".$mailSendInfos['replyTo']."\r\n";
        if ($isUpdate) {
          $mail->subject = "Mise à jour de votre devis ".$mailSendInfos['siteName'];
          $mail->template = $mailSendInfos['tplUser'].'-bo_estimates-updated';
        } else {
          $mail->subject =  "Votre devis ".$mailSendInfos['siteName']." n°".$this->id;
          $mail->template = $this->type == self::TYPE_NORMAL ? $mailSendInfos['tplUser'].'-bo_estimates-sent' : $mailSendInfos['tplUser'].'-bo_estimates-sent_adhoc';
        }
        $mail->data = array(
          'CLIENT_FIRSTNAME' => $this->prenom,
          'CLIENT_LASTNAME' => $this->nom,
          'ESTIMATE_LINK' => PDF_URL."devis-commercial/".$this->web_id."#zoom=100",
          'ESTIMATE_VALIDITY' => $this->validity,
          'ESTIMATE_PAYMENT_MODE' => self::getPaymentModeText($this->payment_mode),
          'CLIENT_FO_ACCOUNT_LINK' => COMPTE_URL."login.html",
          'OPERATOR_NAME' => $this->updated_user->name,
          'OPERATOR_PHONE' => $this->updated_user->phone,
          'CLIENT_FO_ACCOUNT_ESTI_LINK' => COMPTE_URL."pdfestimate.html?estimateID=".$this->web_id."&token=".$this->client->web_id."#account-contact-dialog_3,".$this->id,//COMPTE_URL."contact-form.html?type=3&id=".$this->id
        );
        $web_id = $this->web_id;
        require WWW_PATH.'pdf/estimate.php';
        $mail->addAttachment(PDF_ESTIMATE."Devis commercial ".$this->id.".pdf");
        if ($this->associated_gsc == self::ASSOCIATED_GSC_TC_MAIL_ORDER)
          $mail->addAttachment(PDF_PATH."CGV-Techni-Contact.pdf");
        elseif ($this->associated_gsc == self::ASSOCIATED_GSC_MOBANEO_MAIL_ORDER)
          $mail->addAttachment(PDF_PATH."CGV-Mobaneo.pdf");
        break;
      case self::ASSOCIATED_GSC_ADVERTISER:
		
		$sql_users  = "SELECT name ,uu.phone,fax,uu.email
						FROM  bo_users uu, estimate ee
						WHERE ee.updated_user_id = uu.id
						AND ee.id='".$this->id."' ";
		$req_users  =  mysql_query($sql_users);
		$data_users =  mysql_fetch_object($req_users);
        $mail->headers = "From: Techni-Contact - ".$this->updated_user->name." <".$this->updated_user->email.">\r\n".
                         "Reply-To: Service clients - Techni-Contact <".$this->updated_user->email.">\r\n";
        $mail->subject = "Contrat de partenariat Web Techni-Contact";
        $mail->template = 'user-bo_estimates-advertiser_sent';
		
		$sql_users  =  "SELECT uu.name,uu.phone,uu.email
						FROM   bo_users uu, estimate ee
						WHERE  ee.updated_user_id = uu.id
						AND    ee.id='".$this->id."' ";
		$req_users  =  mysql_query($sql_users);
		$data_users =  mysql_fetch_object($req_users);		

		
        $mail->data = array(
		  'CLIENT_FIRSTNAME' => $this->prenom,
          'CLIENT_LASTNAME'  => $this->nom, 
		  'NOM_COMMERCIAL' =>  $data_users->name,
          'TEL_COMMERCIAL' =>  "Tel : ".$data_users->phone,  
          'FAX_COMMERCIAL'   => "Fax : 01 83 62 36 12",    
          'EMAIL_COMMERCIAL' =>  $data_users->email
        );
		
		$id_estimate = $this->id;
		require WWW_PATH.'pdf/contrat_partenariat.php';
		
		$mail->addAttachment(PDF_PATH."Contrat-de-partenariat-techni-contact.pdf");
        $mail->addAttachment(PDF_PATH."CGV-partenaires.pdf");
        $mail->addAttachment(PDF_PATH."Devenez-Partenaire-Techni-Contact.pdf");
		// Add attachement on 18/01/2016 12:02 FR
		$mail->addAttachment(PDF_PATH."pres-catalogue-techni-contact.pdf");
		
		
        break;
    
      //Change on 23/02/2015 10:18
      case self::ASSOCIATED_GSC_CATALOGUE_GENERAL:
        $mailSendInfos = $this->getMailSendInfos();
        $mail->headers = "From: ".$mailSendInfos['from']."\nReply-To: ".$mailSendInfos['replyTo']."\r\n";
        if ($isUpdate) {
          $mail->subject = "Mise à jour de votre offre catalogue Techni-contact n°".$this->id;
          $mail->template = 'user-bo_estimates-updated_catalogue_general';
        } else {
          $mail->subject =  "Offre catalogue Techni-contact n°".$this->id;
          $mail->template = 'user-bo_estimates-sent_catalogue_general';
        }
		
		
		
		$sql_users  =  "SELECT uu.name,uu.phone,uu.email
						FROM   bo_users uu, estimate ee
						WHERE  ee.updated_user_id = uu.id
						AND    ee.id='".$this->id."' ";
		$req_users  =  mysql_query($sql_users);
		$data_users =  mysql_fetch_object($req_users);
		
        $mail->data = array(
          'CLIENT_FIRSTNAME' => $this->prenom,
          'CLIENT_LASTNAME'  => $this->nom,
          'ESTIMATE_LINK'    => PDF_URL."devis-commercial/".$this->web_id."#zoom=100",
		  'NOM_COMMERCIAL'   => $data_users->name,
		  'TEL_COMMERCIAL'   => "Tel : ".$data_users->phone,  
		  'FAX_COMMERCIAL'   => "Fax : 01 83 62 36 12",  
		  'EMAIL_COMMERCIAL' => $data_users->email
        );
        $web_id = $this->web_id;
		
        require WWW_PATH.'pdf/estimate.php';
        $mail->addAttachment(PDF_ESTIMATE."Devis commercial ".$this->id.".pdf");
		
		// Add attachement on 18/01/2016 12:02 FR
		$mail->addAttachment(PDF_PATH."pres-catalogue-techni-contact.pdf");
        // $mail->send();
		
		/*if ($this->associated_gsc == self::ASSOCIATED_GSC_TC_MAIL_ORDER)
          $mail->addAttachment(PDF_PATH."CGV-Techni-Contact.pdf");
        elseif ($this->associated_gsc == self::ASSOCIATED_GSC_MOBANEO_MAIL_ORDER)
          $mail->addAttachment(PDF_PATH."CGV-Mobaneo.pdf");
        */
        break;

      case self::ASSOCIATED_GSC_CATALOGUE_INDUSTRIE:
        $mailSendInfos = $this->getMailSendInfos();
        $mail->headers = "From: ".$mailSendInfos['from']."\nReply-To: ".$mailSendInfos['replyTo']."\r\n";
        if ($isUpdate) {
          $mail->subject = "Mise à jour de votre offre catalogue Techni-contact n°".$this->id;
          $mail->template = 'user-bo_estimates-updated_catalogue_industrie';
        } else {
          $mail->subject =  "Offre catalogue Techni-contact n°".$this->id;
          $mail->template = 'user-bo_estimates-sent_catalogue_industrie';
        }
		
		$sql_users  = "SELECT name ,uu.phone,fax,uu.email
						FROM  bo_users uu, estimate ee
						WHERE ee.updated_user_id = uu.id
						AND ee.id='".$this->id."' ";
		$req_users  =  mysql_query($sql_users);
		$data_users =  mysql_fetch_object($req_users);

		if(!empty($data_users->fax)) $fax= "Fax : ".$data_users->fax;
				else $fax = 'Fax : 01 83 62 36 12';
		
        $mail->data = array(
          'CLIENT_FIRSTNAME' => $this->prenom,
          'CLIENT_LASTNAME'  => $this->nom,
          'ESTIMATE_LINK'    => PDF_URL."devis-commercial/".$this->web_id."#zoom=100",
		  'NOM_COMMERCIAL'   =>  $data_users->name,
		  'TEL_COMMERCIAL'   =>  "Tel : ".$data_users->phone,  
		  'FAX_COMMERCIAL'   =>  $fax,  
		  'EMAIL_COMMERCIAL' =>  $data_users->email
        );
        $web_id = $this->web_id;
        require WWW_PATH.'pdf/estimate.php';
        $mail->addAttachment(PDF_ESTIMATE."Devis commercial ".$this->id.".pdf");
		
		// Add attachement on 18/01/2016 12:02 FR
		$mail->addAttachment(PDF_PATH."pres-catalogue-techni-contact.pdf");
		
        /*if ($this->associated_gsc == self::ASSOCIATED_GSC_TC_MAIL_ORDER)
          $mail->addAttachment(PDF_PATH."CGV-Techni-Contact.pdf");
        elseif ($this->associated_gsc == self::ASSOCIATED_GSC_MOBANEO_MAIL_ORDER)
          $mail->addAttachment(PDF_PATH."CGV-Mobaneo.pdf");
        */
        break;
      
      case self::ASSOCIATED_GSC_ADVERTISER_FLAT_FEE:
	  
	  $sql_users  = "SELECT name ,uu.phone,fax,uu.email
					 FROM  bo_users uu, estimate ee
					 WHERE ee.updated_user_id = uu.id
					 AND ee.id='".$this->id."' ";
	  $req_users  =  mysql_query($sql_users);
	  $data_users =  mysql_fetch_object($req_users);
	  
	  if(!empty($data_users->fax)) $fax= "Fax : ".$data_users->fax;
	  else $fax = 'Fax : 01 83 62 36 12';
	  
        $mail->headers = "From: Techni-Contact - ".$this->updated_user->name." <".$this->updated_user->email.">\r\n".
                 "Reply-To: Service clients - Techni-Contact <".$this->updated_user->email.">\r\n";
        $mail->subject = "Offre forfait Techni-Contact";
        $mail->template = 'user-bo_estimates-advertiser_flat_fee_sent';
        $mail->data = array(
          'CLIENT_FIRSTNAME' => $this->prenom,
          'CLIENT_LASTNAME' => $this->nom,
		  'NOM_COMMERCIAL' =>  $data_users->name,
		  'TEL_COMMERCIAL' =>  "Tel : ".$data_users->phone,  
          'FAX_COMMERCIAL' =>  "Fax : 01 83 62 36 12",  
          'EMAIL_COMMERCIAL' =>  $data_users->email
        );
        $web_id = $this->web_id;
        require WWW_PATH.'pdf/estimate.php';
        $mail->addAttachment(PDF_ESTIMATE."Devis commercial ".$this->id.".pdf");
        $mail->addAttachment(PDF_PATH."CGV-partenaires.pdf");
        $mail->addAttachment(PDF_PATH."Devenez-Partenaire-Techni-Contact.pdf");
		// Add attachement on 18/01/2016 12:02 FR
		$mail->addAttachment(PDF_PATH."pres-catalogue-techni-contact.pdf");
      break;
      //End Change on 23/02/2015 10:18
      
    }
    if ($user instanceof BoUser) {
      $gmailInfos = $user->getGmailInfos();
      if (!empty($gmailInfos['login']) && !empty($gmailInfos['pass']))
        $mail->setFromGmail(true, $gmailInfos['login'], $gmailInfos['pass']);
    }
    $mail->send();
  }
  
  /*private function sendStatusMail($listMailsDesti = null) {
    global $user;
    if ($listMailsDesti)
      $this->setMultipleRecipients ($listMailsDesti);
    $mailSendInfos = $this->getMailSendInfos();
    $mail = new Email(array(
      'email' => $this->email.$this->recipients_mail_list,
      'subject' => "Mise à jour de votre devis ".$mailSendInfos['siteName'],
      'headers' => "From: ".$mailSendInfos['from']."\nReply-To: ".$mailSendInfos['replyTo']."\r\n",
      'template' => $mailSendInfos['tplUser'].'-bo_estimates-updated',
      'data' => array(
        'CLIENT_FIRSTNAME' => $this->prenom,
        'CLIENT_LASTNAME' => $this->nom,
        'ESTIMATE_LINK' => PDF_URL."devis-commercial/".$this->web_id."#zoom=100",
        'ESTIMATE_VALIDITY' => $this->validity,
        'ESTIMATE_PAYMENT_MODE' => self::getPaymentModeText($this->payment_mode),
        'CLIENT_FO_ACCOUNT_LINK' => COMPTE_URL."login.html",
        'OPERATOR_NAME' => $this->updated_user->name,
        'OPERATOR_PHONE' => $this->updated_user->phone,
        'CLIENT_FO_ACCOUNT_ESTI_LINK' => COMPTE_URL."contact-form.html?type=3&id=".$this->id
      )
    ));
    $web_id = $this->web_id;
    require WWW_PATH.'pdf/estimate.php';
    $mail->addAttachment(PDF_ESTIMATE."Devis commercial ".$this->id.".pdf");
    if ($user instanceof BoUser) {
      $gmailInfos = $user->getGmailInfos();
      if (!empty($gmailInfos['login']) && !empty($gmailInfos['pass']))
        $mail->setFromGmail(true, $gmailInfos['login'], $gmailInfos['pass']);
    }
    $mail->send();
  }*/
  
  public function createOrder($dataArray = null) {
    if (!$dataArray)
      $dataArray = $this->getNoIdData();
    
    // create order
    $this->order_id = $this->generateOrder($dataArray);
    
    // create invoice
    $this->invoice_id = $this->generateInvoice($dataArray);
    
    $this->status = Estimate::STATUS_WON;
    $this->save();
    
    return array(
      'order_id' => $this->order_id,
      'invoice_id' => $this->invoice_id,
      'status' => $this->status
    );
  }
  
  public function createInvoice() {
    $this->invoice_id = $this->generateInvoice();
    $this->save();
    
    return $this->invoice_id;
  }
  
  private function generateOrder($dataArray = null) {
    if (!$dataArray)
      $dataArray = $this->getNoIdData();
    
    $o = new Order();
    $o->fromArray($dataArray);
    $o->estimate_id = $this->id;
    $o->in_charge_user_id = $this->created_user_id;
    $o->oked = time();
    $o->oked_user_id = $this->updated_user->id; // auto oking accounting the order
    $o->type = $this->source;
    $o->save();
    
    return $o->id;
  }
  
  private function generateInvoice($dataArray = null) {
    if (!$dataArray)
      $dataArray = $this->getNoIdData();
      
    $i = new Invoice();
    $i->fromArray($dataArray);
    $i->status = Invoice::STATUS_NOT_VALIDATED;
    $i->estimate_id = $this->id;
    $i->order_id = $this->order_id;
    $i->autoSetClientCode();
    $i->type = Invoice::TYPE_INVOICE;
    $i->save();
    
    return $i->id;
  }
  
  public function importFromClient($client_id = null) {
    $this->client_id = $client_id ? $client_id : $this->client_id;
    $this->refreshRelated('client');
    if (!isset($this->client))
      return false;
    
    $c = $this->client;
    $this->titre = $c->titre;
    $this->nom = $c->nom;
    $this->prenom = $c->prenom;
    $this->societe = $c->societe;
    $this->adresse = $c->adresse;
    $this->cadresse = $c->complement;
    $this->cp = $c->cp;
    $this->ville = $c->ville;
    $this->pays = $c->pays;
    $this->tel = $c->tel1;
    $this->fax = $c->fax1;
    $this->tva_intra = $c->tva_intra;
    $this->salaries = $c->nb_salarie;
    $this->secteur = $c->secteur_activite;
    $this->qualification = $c->secteur_qualifie;
    $this->naf = $c->code_naf;
    $this->siret = $c->num_siret;
    $this->email = $c->email;
    $this->url = $c->url;
    $this->delivery_infos = $c->infos_sup;
    $this->website_origin = $c->website_origin;
    switch ($this->website_origin) {
      case WEBSITE_ORIGIN_MOBANEO:
        $this->associated_gsc = self::ASSOCIATED_GSC_MOBANEO_MAIL_ORDER;
      // associated_gsc defaults to ASSOCIATED_GSC_TC_MAIL_ORDER in the DB
    }
    if ($c->coord_livraison == 0) {
      $this->titre2 = $this->titre;
      $this->nom2 = $this->nom;
      $this->prenom2 = $this->prenom;
      $this->societe2 = $this->societe;
      $this->adresse2 = $this->adresse;
      $this->cadresse2 = $this->cadresse;
      $this->ville2 = $this->ville;
      $this->cp2 = $this->cp;
      $this->pays2 = $this->pays;
      $this->tel2 = $this->tel;
      $this->fax2 = $this->fax;
    }
    else {
      $this->titre2 = $c->titre_l;
      $this->nom2 = $c->nom_l;
      $this->prenom2 = $c->prenom_l;
      $this->societe2 = $c->societe_l;
      $this->adresse2 = $c->adresse_l;
      $this->cadresse2 = $c->complement_l;
      $this->cp2 = $c->cp_l;
      $this->ville2 = $c->ville_l;
      $this->pays2 = $c->pays_l;
      $this->tel2 = $c->tel2;
      $this->fax2 = $c->fax2;
    }
    $this->source = Estimate::SOURCE_PHONE;
    $this->payment_mode = Estimate::PAYMENT_MODE_AT_ORDER;
    
    return $this->client_id;
  }
  
  public function importFromLead($lead_id) {
    $this->lead_id = $lead_id ? $lead_id : $this->lead_id;
    $this->refreshRelated('lead');
    if (!isset($this->lead))
      return false;
    $l = $this->lead;
    $l->refreshRelated('client');
    if (!isset($l->client))
      return false;
    $this->client_id = $l->client->id;
    
    $this->nom = $l->nom;
    $this->prenom = $l->prenom;
    $this->societe = $l->societe;
    $this->adresse = $l->adresse;
    $this->cadresse = $l->cadresse;
    $this->cp = $l->cp;
    $this->ville = $l->ville;
    $this->pays = $l->pays;
    $this->tel = $l->tel;
    $this->fax = $l->fax;
    $this->tva_intra = $l->client->tva_intra;
    $this->salaries = $l->salaries;
    $this->secteur = $l->secteur;
    $this->qualification = $l->qualification;
    $this->naf = $l->naf;
    $this->siret = $l->siret;
    $this->email = $l->email;
    $this->url = $l->url;
    $this->delivery_infos = $l->infos_sup;
    $this->nom2 = $this->nom;
    $this->prenom2 = $this->prenom;
    $this->societe2 = $this->societe;
    $this->adresse2 = $this->adresse;
    $this->cp2 = $this->cp;
    $this->ville2 = $this->ville;
    $this->pays2 = $this->pays;
    
    $this->campaign_id = $l->campaignID;
    
    return $this->lead_id;
  }
  
  private function getNoIdData() {
    if (!isset($this->lines))
      $this->refreshRelated('lines');
    
    $dataArray = $this->toArray();
    // deleting id's
    unset($dataArray['id']);
    unset($dataArray['web_id']);
    foreach($dataArray['lines'] as &$line)
      unset($line['id']);
    
    return $dataArray;
  }
  
  const TYPE_NORMAL = 0;
  const TYPE_AD_HOC = 1;
  public static $typeList = array(
    self::TYPE_NORMAL => "devis",
    self::TYPE_AD_HOC => "devis Ad Hoc"
  );
  public static function getTypeText($const) {
    return isset(self::$typeList[$const]) ? self::$typeList[$const] : "";
  }
  
  const WAITING_INFO_NO = 0;
  const WAITING_INFO_YES = __MSGR_CTXT_CUSTOMER_TC_ESTIMATE__;
  public static $waitingInfoList = array(
    self::WAITING_INFO_NO => "Non",
    self::WAITING_INFO_YES => "Oui"
  );
  public static function getWaitingInfosText($const) {
    return isset(self::$waitingInfoList[$const]) ? self::$waitingInfoList[$const] : "";
  }
  
  const REMINDER_YES = 0;
  const REMINDER_NO = 1;
  public static $reminderList = array(
    self::REMINDER_YES => "Oui",
    self::REMINDER_NO => "Non"
  );
  public static function getReminderText($const) {
    return isset(self::$reminderList[$const]) ? self::$reminderList[$const] : "";
  }
  
  const ACTIVITY_VPC_COMPTANT = 0;
  const ACTIVITY_VPC_DIFFERE = 1;
  const ACTIVITY_VPC_EXPORT_COMPTANT = 2;
  const ACTIVITY_VPC_EXPORT_DIFFERE = 3;
  const ACTIVITY_VPC_INTRA_COMPTANT = 4;
  const ACTIVITY_VPC_INTRA_DIFFERE = 5;
  const ACTIVITY_ANNONCEUR = 10;
  const ACTIVITY_ANNONCEUR_EXPORT = 11;
  const ACTIVITY_ANNONCEUR_INTRA = 12;
  const ACTIVITY_CATALOG = 20;
  const ACTIVITY_CATALOG_INTRA = 21;
  const ACTIVITY_LOCATION_FICHIERS = 30;
  const ACTIVITY_LOCATION_BANNIERE_PUB = 255;
  public static $activityList = array(
    self::ACTIVITY_VPC_COMPTANT => "VPC comptant",
    self::ACTIVITY_VPC_DIFFERE => "VPC différé",
    self::ACTIVITY_VPC_EXPORT_COMPTANT => "VPC export comptant",
    self::ACTIVITY_VPC_EXPORT_DIFFERE => "VPC export différé",
    self::ACTIVITY_VPC_INTRA_COMPTANT => "VPC intra comptant",
    self::ACTIVITY_VPC_INTRA_DIFFERE => "VPC intra différé",
    self::ACTIVITY_ANNONCEUR => "Annonceur",
    self::ACTIVITY_ANNONCEUR_EXPORT => "Annonceur export",
    self::ACTIVITY_ANNONCEUR_INTRA => "Annonceur intra",
    self::ACTIVITY_CATALOG => "Catalogue",
    self::ACTIVITY_CATALOG_INTRA => "Catalogue intra",
    self::ACTIVITY_LOCATION_FICHIERS => "Location fichiers",
    self::ACTIVITY_LOCATION_BANNIERE_PUB => "Location bannière pub"
  );
  public static function getActivityText($const) {
    return isset(self::$activityList[$const]) ? self::$activityList[$const] : "";
  }
  public static $activityNoFdpList = array( // no fdp
    self::ACTIVITY_ANNONCEUR,
    self::ACTIVITY_ANNONCEUR_EXPORT,
    self::ACTIVITY_ANNONCEUR_INTRA,
    self::ACTIVITY_CATALOG,
    self::ACTIVITY_CATALOG_INTRA,
    self::ACTIVITY_LOCATION_FICHIERS,
    self::ACTIVITY_LOCATION_BANNIERE_PUB
  );
  public static $activityNoTvaList = array( // no tva
    self::ACTIVITY_VPC_EXPORT_COMPTANT,
    self::ACTIVITY_VPC_EXPORT_DIFFERE,
    self::ACTIVITY_VPC_INTRA_COMPTANT,
    self::ACTIVITY_VPC_INTRA_DIFFERE,
    self::ACTIVITY_ANNONCEUR_EXPORT,
    self::ACTIVITY_ANNONCEUR_INTRA,
    self::ACTIVITY_CATALOG_INTRA
  );
  public static $activityTvaIntraList = array( // tva intra
    self::ACTIVITY_VPC_INTRA_COMPTANT,
    self::ACTIVITY_VPC_INTRA_DIFFERE,
    self::ACTIVITY_ANNONCEUR_INTRA,
    self::ACTIVITY_CATALOG_INTRA
  );
  
  const ASSOCIATED_GSC_TC_MAIL_ORDER = 1;
  const ASSOCIATED_GSC_ADVERTISER = 10;
  const ASSOCIATED_GSC_ADVERTISER_FLAT_FEE = 11;
  const ASSOCIATED_GSC_MOBANEO_MAIL_ORDER = 101;
  const ASSOCIATED_GSC_NONE = 0;
  
  //Change on 23/02/2015 09:55m
  const ASSOCIATED_GSC_CATALOGUE_GENERAL = 110;
  const ASSOCIATED_GSC_CATALOGUE_INDUSTRIE = 111;
  
  public static $associatedGSCList = array(
    self::ASSOCIATED_GSC_TC_MAIL_ORDER => "VPC",
    self::ASSOCIATED_GSC_MOBANEO_MAIL_ORDER => "VPC Mobaneo",
    self::ASSOCIATED_GSC_ADVERTISER => "Annonceur",
    self::ASSOCIATED_GSC_ADVERTISER_FLAT_FEE => "Annonceur forfait",
    self::ASSOCIATED_GSC_CATALOGUE_GENERAL => "Catalogue général",
    self::ASSOCIATED_GSC_CATALOGUE_INDUSTRIE => "Catalogue industrie",
    self::ASSOCIATED_GSC_NONE => "Aucune"
  );
  
  //End Change on 23/02/2015 09:55m
  
  public static function getAssociatedGSCText($const) {
    return isset(self::$associatedGSCList[$const]) ? self::$associatedGSCList[$const] : "";
  }
  public static $activityToAssociatedGSCList = array(
    self::ACTIVITY_ANNONCEUR => self::ASSOCIATED_GSC_ADVERTISER,
    self::ACTIVITY_ANNONCEUR_EXPORT => self::ASSOCIATED_GSC_ADVERTISER,
    self::ACTIVITY_ANNONCEUR_INTRA => self::ASSOCIATED_GSC_ADVERTISER
  );
  
  const SOURCE_LEAD = 1;
  const SOURCE_PHONE = 2;
  const SOURCE_FAX = 3;
  const SOURCE_EMAIL = 4;
  const SOURCE_OTHER = 9;
  public static $sourceList = array(
    self::SOURCE_LEAD => "Lead",
    self::SOURCE_PHONE => "Téléphone",
    self::SOURCE_FAX => "Fax",
    self::SOURCE_EMAIL => "Email",
    self::SOURCE_OTHER => "Autre"
  );
  public static function getSourceText($const) {
    return isset(self::$sourceList[$const]) ? self::$sourceList[$const] : "";
  }
  
  const STATUS_IN_PROCESS = 1;
  const STATUS_SENT = 2;
  const STATUS_UPDATED = 3;
  const STATUS_WON = 4;
  const STATUS_LOST = 5;
  public static $statusList = array(
    self::STATUS_IN_PROCESS => "En cours",
    self::STATUS_SENT => "Envoyé",
    self::STATUS_UPDATED => "Mis à jour",
    self::STATUS_WON => "Gagné",
    self::STATUS_LOST => "Perdu"
  );
  public static function getStatusText($const) {
    return isset(self::$statusList[$const]) ? self::$statusList[$const] : "";
  }
  
  const PAYMENT_MEAN_BC_TBD = 0;
  const PAYMENT_MEAN_BC_CB = 1;
  const PAYMENT_MEAN_BC_VISA = 2;
  const PAYMENT_MEAN_BC_MASTERCARD = 3;
  const PAYMENT_MEAN_BC_AMEX = 4;
  const PAYMENT_MEAN_PAYPAL = 5;
  const PAYMENT_MEAN_CHEQUE = 10;
  const PAYMENT_MEAN_VIREMENT = 20;
  const PAYMENT_MEAN_DIFFERE = 30;
  const PAYMENT_MEAN_CB = 40;
  const PAYMENT_MEAN_MANDAT = 50;
  const PAYMENT_BANKER_ORDER = 60;
  const PAYMENT_BILL_OF_EXCHANGE = 70;
  public static $paymentMeanList = array(
    self::PAYMENT_MEAN_BC_TBD => "Carte Bancaire (type en attente)",
    self::PAYMENT_MEAN_BC_CB => "Carte Bancaire (Carte Bleue)",
    self::PAYMENT_MEAN_BC_VISA => "Carte Bancaire (Visa)",
    self::PAYMENT_MEAN_BC_MASTERCARD => "Carte Bancaire (Mastercard)",
    self::PAYMENT_MEAN_BC_AMEX => "Carte Bancaire (American Express)",
    self::PAYMENT_MEAN_PAYPAL => "Paypal",
    self::PAYMENT_MEAN_CHEQUE => "Chèque",
    self::PAYMENT_MEAN_VIREMENT => "Virement bancaire",
    self::PAYMENT_MEAN_DIFFERE => "Paiement différé",
    self::PAYMENT_MEAN_CB => "Contre-remboursement",
    self::PAYMENT_MEAN_MANDAT => "Mandat administratif",
    self::PAYMENT_BANKER_ORDER => "Prélèvement",
    self::PAYMENT_BILL_OF_EXCHANGE  => "Lettre de change"
  );
  public static function getPaymentMeanText($const) {
    return isset(self::$paymentMeanList[$const]) ? self::$paymentMeanList[$const] : "";
  }
  
  const PAYMENT_MODE_AT_ORDER = 1;
  const PAYMENT_MODE_30_DAYS_INVOICING = 2;
  const PAYMENT_MODE_50_ORDER_50_INVOICING = 3;
  const PAYMENT_MODE_MONEY_ORDER = 4;
  public static $paymentModeList = array(
    self::PAYMENT_MODE_AT_ORDER => "A la commande",
    self::PAYMENT_MODE_30_DAYS_INVOICING => "30 jours date de facture",
    self::PAYMENT_MODE_50_ORDER_50_INVOICING => "50% à la commande 50% à réception",
    self::PAYMENT_MODE_MONEY_ORDER => "Mandat administratif"
  );
  public static function getPaymentModeText($const) {
    return isset(self::$paymentModeList[$const]) ? self::$paymentModeList[$const] : "";
  }
  
}