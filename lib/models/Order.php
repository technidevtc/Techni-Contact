<?php

/**
 * Order
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Order extends BaseOrder
{
  public function setUp() {
    parent::setUp();
    $this->hasMany('OrderLine as lines', array(
        'local' => 'id',
        'foreign' => 'order_id',
        'cascade' => array('delete')
      )
    );
    $this->hasOne('Clients as client', array(
        'local' => 'client_id',
        'foreign' => 'id'
      )
    );
    $this->hasOne('Advertisers as main_supplier', array(
        'local' => 'main_sup_id',
        'foreign' => 'id'
      )
    );
    $this->hasOne('Contacts as lead', array(
        'local' => 'lead_id',
        'foreign' => 'id'
      )
    );
    $this->hasOne('Estimate as estimate', array(
        'local' => 'estimate_id',
        'foreign' => 'id'
      )
    );
    $this->hasOne('Invoice as invoice', array(
        'local' => 'id',
        'foreign' => 'order_id'
      )
    );
    $this->hasOne('BoUsers as created_user', array(
        'local' => 'created_user_id',
        'foreign' => 'id'
      )
    );
    $this->hasOne('BoUsers as updated_user', array(
        'local' => 'updated_user_id',
        'foreign' => 'id'
      )
    );
    $this->hasOne('BoUsers as in_charge_user', array(
        'local' => 'in_charge_user_id',
        'foreign' => 'id'
      )
    );
    $this->hasOne('BoUsers as oked_user', array(
        'local' => 'oked_user_id',
        'foreign' => 'id'
      )
    );
    $this->hasOne('BoUsers as validated_user', array(
        'local' => 'validated_user_id',
        'foreign' => 'id'
      )
    );
    $this->hasOne('BoUsers as partly_cancelled_user', array(
        'local' => 'partly_cancelled_user_id',
        'foreign' => 'id'
      )
    );
    $this->hasOne('BoUsers as cancelled_user', array(
        'local' => 'cancelled_user_id',
        'foreign' => 'id'
      )
    );
    $this->hasMany('SupplierOrder as supplier_orders', array(
        'local' => 'id',
        'foreign' => 'order_id'
      )
    );
  }
  
  public function construct() {
    $this->mapValue('send_mail', false);
    $this->mapValue('stotal_ht', 0);
    $this->mapValue('total_tva', 0);
    $this->mapValue('fdp_tva', 0);
    $this->mapValue('type_text', "");
    $this->mapValue('recipients_mail_list', "");
  }
  
  public function postHydrate($event) {
    $data = $event->data;
    $data['send_mail'] = false;
    $data['stotal_ht'] = $data['total_ht'] - $data['fdp_ht'];
    $data['total_tva'] = $data['total_ttc'] - $data['total_ht'];
    $data['fdp_tva'] = $data['fdp_ttc'] - $data['fdp_ht'];
    $data['type_text'] = self::getTypeText($data['type']);
    $event->data = $data;
  }
  
  // generate an unique transaction id for the current day
  public function generateTransactionId() {
    $ids = Doctrine_Query::create()
        ->select('transaction_id')
        ->from('Order')
        ->where('transaction_id > ?', 0)
        ->andWhere('created >= ?', mktime(0,0,0))
        ->andWhere('created < ?', mktime(0,0,0)+86400)
        ->execute(array(), Doctrine_Core::HYDRATE_NONE);
    
    $ids_i = array();
    foreach($ids as $id)
      $ids_i[$id[0]] = true;
    
    do $id = mt_rand(1,999999); while (isset($ids_i[$id]));
    
    $this->transaction_id = $id;
  }
  
  public function preInsert($event) {
    global $user;
    $this->created = time();
    if ($user instanceof BoUser)
      $this->created_user_id = $user->id;
  }
  
  protected $noCascadingRelations;
  
  public function preSave($event) {
    global $user;
    $this->updated = time();
    
    if (empty($this->web_id))
      $this->genId('web_id');
    
    if ($user instanceof BoUser) {
      $this->updated_user_id = $user->id;
      if ($this->updated_user_id != $user->id) {
        $this->updated_user_id = $user->id;
        if (isset($this->updated_user))
          $this->refreshRelated('updated_user');
      }
    }
    
    $mv = $this->getModified(true); // modified values 
    if (isset($mv['processing_status']) || $mv['sav_closed_text'] || $mv['sav_opened_text']
     || $mv['forecast_shipping_text'] || $mv['shipped_text'] || $mv['cancelled_text'] || $mv['partly_cancelled_text']) {
      $this->processProcessingStatus();
    }
   
    // update suppliers orders when at least one of the lines was modified
    if ($this->lines->isModified()) {
      $this->updateSupplierPart();
    }

    // prevents from updating user account from here
    $this->noCascadingRelations = array();
    if (isset($this->created_user))          $this->noCascadingRelations[] = 'created_user';
    if (isset($this->updated_user))          $this->noCascadingRelations[] = 'updated_user';
    if (isset($this->in_charge_user))        $this->noCascadingRelations[] = 'in_charge_user';
    if (isset($this->oked_user))             $this->noCascadingRelations[] = 'oked_user';
    if (isset($this->validated_user))        $this->noCascadingRelations[] = 'validated_user';
    if (isset($this->partly_cancelled_user)) $this->noCascadingRelations[] = 'partly_cancelled_user';
    if (isset($this->cancelled_user))        $this->noCascadingRelations[] = 'cancelled_user';
    foreach ($this->noCascadingRelations as $relation)
      $this->clearRelated($relation);
  }
  
  public function postSave($event) {
    foreach ($this->noCascadingRelations as $relation)
      $this->refreshRelated($relation);
    
    foreach ($this->supplier_orders as $so)
      $so->refreshRelated('sender');
  }
  
  public function setProcessingStatus($status, $send_mail = false) {
    if (isset(self::$globalProcessingStatusList[$status])) {
      $this->processing_status = $status;
      $this->send_mail = !!$send_mail;
      $this->save();
    }
  }
  
  private function processProcessingStatus() {
    if ($this->processing_status >= self::GLOBAL_PROCESSING_STATUS_PROCESSING) {
      // Record notification in messenger
      $m = new Messenger();
      $m->context = __MSGR_CTXT_CUSTOMER_TC_CMD__;
      $m->type_sender = __MSGR_USR_TYPE_BOU__;
      $m->id_sender = $this->updated_user->id;
      $m->type_recipient = __MSGR_USR_TYPE_INT__;
      $m->id_recipient = $this->client_id;
      $m->reference_to = $this->id;
      $m->text = "Mail de notification de changement de statut commande\n".
                 "OpÃ©rateur : ".$this->updated_user->name."\n".
                 "Nouveau statut : ".self::getGlobalProcessingStatusText($this->processing_status)."\n".
                 $this->{self::getProcessingStatusTextFieldName($this->processing_status)};
      $m->setOrder($this); // set messenger object to not be standalone and thus to not load an order object of it's own, to avoid a possible doctrine infinite loop
      $m->setIsNotification(true); // do not send conv email
      $m->save();
      
      switch ($this->processing_status) {
        case self::GLOBAL_PROCESSING_STATUS_ASS_OPEN:
          $this->sav_opened  = time();
          break;
        case self::GLOBAL_PROCESSING_STATUS_ASS_CLOSED:
          $this->sav_closed  = time();
          break;
        case self::GLOBAL_PROCESSING_STATUS_FORECAST_SHIPPING_DATE:
          $this->processed  = time();
          break;
        case self::GLOBAL_PROCESSING_STATUS_PARTLY_SHIPPED:
          break;
        case self::GLOBAL_PROCESSING_STATUS_SHIPPED:
          $this->shipped  = time();
          break;
        case self::GLOBAL_PROCESSING_STATUS_PARTLY_CANCELED:
          $this->partly_cancelled = time();
          $this->partly_cancelled_user_id  = $this->updated_user_id;
          break;
        case self::GLOBAL_PROCESSING_STATUS_CANCELED:
          $this->cancelled = time();
          $this->cancelled_user_id  = $this->updated_user_id;
          break;
      }
      if ($this->send_mail)
        $this->sendProcessingStatusMail($this->recipients_mail_list);
    }
    
    // Mise en spool de la commande pour demande de commentaire des produits
    if ($this->processing_status == self::GLOBAL_PROCESSING_STATUS_PROCESSING) {
      $notation_test = ProductNotation::get('id_commande = '.$this->id);
      if (count($notation_test) < 1){
        $notation_spool = new ProductNotationSpool();
        $notation_spool_data = array(
          'id_commande' => $this->id,
          'insertion_timestamp' => time(),
          'mail_sent' => 0
        );
        $notation_spool->setData($notation_spool_data);
        $notation_spool->save();
      }
    }
    
  }
  
  // update every supplier related info for this order
  public function updateSupplierPart() {
    
    // compute some vars
    $so_infos = array();
    foreach ($this->lines as $line) {
      if (!isset($so_infos[$line->sup_id]))
        $so_infos[$line->sup_id] = array('total_ht' => 0, 'total_a_ht' => 0, 'total_a_ttc' => 0);
      $so_infos[$line->sup_id]['total_ht'] += $line->total_ht + $line->et_total_ht;
      $so_infos[$line->sup_id]['total_a_ht'] += ($line->pau_ht + $line->et_ht) * $line->quantity;
      $so_infos[$line->sup_id]['total_a_ttc'] += ($line->pau_ht + $line->et_ht) * $line->quantity * (1 + $line->tva->taux/100);
    }
    
    // set the main supplier id
    $main_sup_id = 0;
    $max_total_ht = 0;
    foreach ($so_infos as $sup_id => $infos)
      if ($infos['total_ht'] > $max_total_ht)
        $main_sup_id = $sup_id;
    $this->main_sup_id = $main_sup_id;
    
    // index the old supplier id's
    $old_so = array();
    foreach ($this->supplier_orders as $so)
      $old_so[$so->sup_id] = true;
    
    // remove the deleted supplier orders and recalculate thoses still present
    foreach ($this->supplier_orders as $k => $so) {
      if (!isset($so_infos[$so->sup_id])) {
        $this->supplier_orders->remove($k);
      }
      else {
        $so->total_ht = round($so_infos[$so->sup_id]['total_a_ht'],2);
        $so->total_ht_real = $so->total_ht + $so->fdp_ht;
        $so->total_ttc = round($so_infos[$so->sup_id]['total_a_ttc'],2);
      }
    }
    
    // create and calculate the new ones
    $new_so = array_diff_key($so_infos, $old_so);
    foreach ($new_so as $sup_id => $infos) {
      $so = new SupplierOrder();
      $so->sup_id = $sup_id;
      $so->total_ht = $infos['total_a_ht'];
      $so->total_ht_real = $so->total_ht + $so->fdp_ht;
      $so->total_ttc = $infos['total_a_ttc'];
      $so->processing_status = SupplierOrder::PROCESSING_STATUS_NOT_VIEWED;
      $this->supplier_orders[] = $so;
    }
  }
  
  public function updateWithLines($data) {
    
    // only update supplier comment
    if (!empty($data['lines'])) {
      foreach ($data['lines'] as &$line) {
        if (!empty($line['pdt_ref_id'])) {
          $line['pdt_ref']['label_long'] = $line['desc'];
        } else {
          $line['pdt_ref'] = array(
            'idProduct' => $line['pdt_id'],
            'sup_id' => $line['sup_id'],
            'label' => $line['desc'],
            'label_long' => $line['desc'],
            'refSupplier' => $line['sup_ref'],
            'price' => $line['pu_ht'],
            'price2' => $line['pau_ht'],
            'ecotax' => $line['et_ht'],
            'marge' => round(1 - $line['pau_ht'] / $line['pu_ht'],3),
            'vpc' => $line['vpc']
          );
        }
      }
    }
    
    if(!empty($data['listMailsRecipients']))
      $this->setMultipleRecipients($data['listMailsRecipients']);
    
    $this->synchronizeWithArray($data);
    $this->calculate();
    $this->save();
    
    return $this->toArray();
  }
  
  public function calculate() {
    $hasTva = !in_array($this->activity, self::$activityNoTvaList);
    $this->stotal_ht = $this->total_tva = 0;
    foreach ($this->lines as $line) {
      
      // rounding entries to be sure
      $line->pau_ht = round($line->pau_ht, 6);
      $line->pu_ht = round($line->pu_ht, 6);
      $line->et_ht = round($line->et_ht, 6);
      $line->quantity = round($line->quantity);
      $line->total_a_ht = $line->pau_ht * $line->quantity;
      $line->total_ht_pre = $line->pu_ht * $line->quantity;
      
      $dpMul = (100-($line->discount+$line->promotion))/100;
      $tvaMul = Tva::getRate($line->tva_code)/100; // using Tva:getRate to avoid sql queries fetching the tva relation
      
      $line->total_ht = round($line->total_ht_pre * $dpMul, 6);
      $line->total_tva = $hasTva ? round($line->total_ht_pre * $tvaMul * $dpMul, 6) : 0;
      $line->total_ttc = round($line->total_ht + $line->total_tva, 6);
      $line->et_total_ht = $line->et_ht * $line->quantity;
      
      $et_total_tva = round($line->et_total_ht * $tvaMul, 6);
      
      $this->stotal_ht += $line->total_ht + $line->et_total_ht;
      $this->total_tva += $line->total_tva + $et_total_tva;
    }
    
    $this->fdp_ht = round($this->fdp_ht, 6); // rounding fdp entry
    $this->fdp_tva = $hasTva ? round($this->fdp_ht * Tva::getRate(1)/100, 6) : 0;
    $this->fdp_ttc = $this->fdp_ht + $this->fdp_tva;
    
    $this->total_ht = round($this->stotal_ht + $this->fdp_ht, 2);
    $this->total_tva = round($this->total_tva + $this->fdp_tva, 2);
    $this->total_ttc = $this->total_ht + $this->total_tva;
  }
  
  public function oking($listMailsDesti = null) {
    global $user;
    $this->oked = time();
    $this->oked_user_id = $user->id;
    $this->refreshRelated('oked_user');
    $this->save();
    return array(
      'oked' => $this->oked,
      'oked_user_id' => $this->oked_user_id,
      'oked_user_login' => $this->oked_user->login
    );
  }
  
  public function validate($sendRecapMail = true, $sendInvoiceMail = true, $listMailsDesti = null) {
    global $user;
    if (!$this->validated) {
      $this->validated = time();
      $this->validated_user_id = $user->id;
      if ($this->processing_status < self::GLOBAL_PROCESSING_STATUS_PROCESSING)
        $this->processing_status = self::GLOBAL_PROCESSING_STATUS_PROCESSING;
      if ($this->activity != self::ACTIVITY_ANNONCEUR && $this->activity != self::ACTIVITY_ANNONCEUR_EXPORT) {
        $this->refreshRelated('invoice');
        if (!isset($this->invoice))
          $this->invoice = $this->generateInvoice();
        if (!in_array($this->activity, self::$activityDeferredList))
          $this->invoice->validate(false, false);
        else
          $sendInvoiceMail = false;
      }
      $this->save();
      if ($sendRecapMail)
        $this->sendClientEmail($listMailsDesti);
      if ($sendInvoiceMail)
        $this->invoice->sendMail(Invoice::STATUS_NOT_VALIDATED, null, $listMailsDesti);
    }
    return array(
      'validated' => $this->validated,
      'validated_user_id' => $this->validated_user_id,
      'validated_user_login' => $this->validated_user->login,
      'processing_status' => $this->processing_status
    );
  }

  private function generateInvoice($dataArray = null) {
    if (!$dataArray)
      $dataArray = $this->getNoIdData();
      
    $i = new Invoice();
    $i->fromArray($dataArray);
    $i->status = Invoice::STATUS_NOT_VALIDATED;
    $i->estimate_id = $this->estimate_id;
    $i->autoSetClientCode();
    $i->type = Invoice::TYPE_INVOICE;
    
    return $i;
  }
  
  // deprecated
  public function importFromClient($client_id = null) {
    $this->client_id = $client_id ? $client_id : $this->client_id;
    $this->refreshRelated('client');
    if (!isset($this->client))
      return false;
    
    $c = $this->client;
    $this->titre = $c->titre;
    $this->nom = $c->nom;
    $this->prenom = $c->prenom;
    $this->societe = $c->societe;
    $this->adresse = $c->adresse;
    $this->cadresse = $c->complement;
    $this->cp = $c->cp;
    $this->ville = $c->ville;
    $this->pays = $c->pays;
    $this->tel = $c->tel1;
    $this->fax = $c->fax1;
    $this->tva_intra = $c->tva_intra;
    $this->salaries = $c->nb_salarie;
    $this->secteur = $c->secteur_activite;
    $this->qualification = $c->secteur_qualifie;
    $this->naf = $c->code_naf;
    $this->siret = $c->num_siret;
    $this->email = $c->email;
    $this->url = $c->url;
    $this->delivery_infos = $c->infos_sup;
    $this->website_origin = $c->website_origin;
    if ($c->coord_livraison == 0) {
      $this->titre2 = $this->titre;
      $this->nom2 = $this->nom;
      $this->prenom2 = $this->prenom;
      $this->societe2 = $this->societe;
      $this->adresse2 = $this->adresse;
      $this->cadresse2 = $this->cadresse;
      $this->ville2 = $this->ville;
      $this->cp2 = $this->cp;
      $this->pays2 = $this->pays;
      $this->tel2 = $this->tel;
      $this->fax2 = $this->fax;
    }
    else {
      $this->titre2 = $c->titre_l;
      $this->nom2 = $c->nom_l;
      $this->prenom2 = $c->prenom_l;
      $this->societe2 = $c->societe_l;
      $this->adresse2 = $c->adresse_l;
      $this->cadresse2 = $c->complement_l;
      $this->cp2 = $c->cp_l;
      $this->ville2 = $c->ville_l;
      $this->pays2 = $c->pays_l;
      $this->tel2 = $c->tel2;
      $this->fax2 = $c->fax2;
    }
    
    return $this->client_id;
  }
  
  public function importFromCart($c, $c2){
    // client infos
    $cda = $c2['delivery_address'];
    $cba = $c2['billing_address'];
    $cli = $c2['client'];
     
    $this->client_id = $cli['id'];

    // billing info
    $this->titre = $cba['titre'];
    $this->nom = $cba['nom'];
    $this->prenom = $cba['prenom'];
    $this->societe = $cba['societe'];
    $this->tel = $cba['tel1'];
    $this->fax = $cba['fax1'];
    $this->adresse = $cba['adresse'];
    $this->cadresse = $cba['complement'];
    $this->cp = $cba['cp'];
    $this->ville = $cba['ville'];
    $this->pays = $cba['pays'];
    $this->delivery_infos = $cba['infos_sup'];
    
    // delivery info
    $this->titre2 = $cda['titre'];
    $this->nom2 = $cda['nom'];
    $this->prenom2 = $cda['prenom'];
    $this->societe2 = $cda['societe'];
    $this->tel2 = $cda['tel1'];
    $this->fax2 = $cda['fax1'];
    $this->adresse2 = $cda['adresse'];
    $this->cadresse2 = $cda['complement'];
    $this->cp2 = $cda['cp'];
    $this->ville2 = $cda['ville'];
    $this->pays2 = $cda['pays'];
    
    // other infos
    $this->salaries = $cli['nb_salarie'];
    $this->secteur = $cli['secteur_activite'];
    $this->qualification = $cli['secteur_qualifie'];
    $this->naf = $cli['code_naf'];
    $this->siret = $cli['num_siret'];
    $this->email = $cli['email'];
    $this->url = $cli['url'];
    
    // calculated amounts
    $c->calculateCart();
    $this->total_ht = $c->totalHT;
    $this->total_ttc = $c->totalTTC;
    $this->fdp_ht = $c->fdpHT;
    $this->fdp_ttc = $c->fdpTTC;
    $this->promotion_code = $c->promotionCode;
    
    foreach ($c->items as $item) {
      $line = new OrderLine();
      $line->pdt_id = $item['idProduct'];
      $line->pdt_ref_id = $item['idTC'];
      $line->sup_id = $item['advID'];
      $line->sup_ref = $item['refSupplier'];
      if (!empty($item['label_long'])) {
        $itemDesc = $item['label_long'];
      } elseif (!empty($item['customCols'])) {
        $itemDesc = $item['label'];
        foreach($item['customCols'] as $labelCol => $ccol_content)
          $itemDesc .= " - ".$labelCol.": ".$ccol_content;
      } else {
        $itemDesc = $item['name'] . (empty($item['fastdesc']) ? "" : " - " . $item['fastdesc']) . (empty($item['label']) ? "" : " - " . $item['label']);
      }
      
      // in the FO cart, ecotax is directly accounted in each item price/total, so we have to extract it to make it independant for the BO
      $line->desc = $itemDesc;
      $line->pau_ht = $item['price2'];
      $line->pu_ht = $item['price'] - $item['ecotax'];
      $line->et_ht = $item['ecotax'];
      $line->quantity = $item['quantity'];
      $line->promotion = $item['promotionpc'];
      $line->discount = $item['discountpc'];
      $line->tva_code = $item['idTVA'];
      $line->delivery_time = $item['delivery_time'];
      $line->comment = $item['comment'];
      $this->lines[] = $line;
    }
    
    $this->calculate();
  }
  
  public function getMailSendInfos($mailType) {
    global $website_origin_url_list;
    $mailSendInfos = array();
    switch (strtolower($mailType)) {
      case 'processingstatusmail':
        switch ($this->website_origin) {
          case 'MOB':
            $mailSendInfos['subject'] = "Suivi de votre commande ".($this->alternate_id ? $this->alternate_id : $this->id);
            $mailSendInfos['headers'] = "From: Mobaneo - Service clients <commandes@mobaneo.com>\r\n".
              "Reply-To: Mobaneo - Service clients <commandes@mobaneo.com>\r\n".
              (($this->processing_status == self::GLOBAL_PROCESSING_STATUS_PARTLY_CANCELED || $this->processing_status == self::GLOBAL_PROCESSING_STATUS_CANCELED) ?
                "Cc:comptabilite@mobaneo.com\r\n" :
                ""
              );
            $mailSendInfos['template'] = 'user_mob-bo_orders-order_status_update';
            $mailSendInfos['FO_URL'] = $website_origin_url_list[WEBSITE_ORIGIN_MOBANEO];
            break;
          case 'TC':
          default:
            $mailSendInfos['subject'] = "Suivi de votre commande ".$this->id;
            $mailSendInfos['headers'] = "From: Service achat Techni-Contact <achat@techni-contact.com>\r\n".
              "Reply-To: Service achat Techni-Contact <achat@techni-contact.com>\r\n".
              (($this->processing_status == self::GLOBAL_PROCESSING_STATUS_PARTLY_CANCELED || $this->processing_status == self::GLOBAL_PROCESSING_STATUS_CANCELED) ?
                "Cc:comptabilite@techni-contact.com\r\n" :
                ""
              );
            $mailSendInfos['template'] = $this->processing_status == self::GLOBAL_PROCESSING_STATUS_ASS_OPEN ?
              'user-bo_orders-order_status_opensav' :
              'user-bo_orders-order_status_update';
            $mailSendInfos['FO_URL'] = URL;
            break;
        }
        break;
      case 'clientemail':
        switch ($this->website_origin) {
          case 'MOB':
            $mailSendInfos['subject'] = "Votre commande Mobaneo nÂ°".($this->alternate_id ? $this->alternate_id : $this->id);
            $mailSendInfos['headers'] = "From: Mobaneo - Service clients <commandes@mobaneo.com>\r\n".
              "Reply-To: Mobaneo - Service clients <commandes@mobaneo.com>\r\n";
            $mailSendInfos['template'] = 'user_mob-fo_order-new_order';
            $mailSendInfos['FO_URL'] = $website_origin_url_list[WEBSITE_ORIGIN_MOBANEO];
            $mailSendInfos['ORDER_ID'] = $this->alternate_id ? $this->alternate_id : $this->id;
            break;
          case 'TC':
          default:
            $mailSendInfos['subject'] = "Votre commande Techni-Contact nÂ°".$this->id;
            $mailSendInfos['headers'] = "From: Service client Techni-Contact <commandes@techni-contact.com>\r\n".
              "Reply-To: Service client Techni-Contact <commandes@techni-contact.com>\r\n".
              "BCC: passage-commande@techni-contact.com,commandes@techni-contact.com,f.stumm@techni-contact.com\r\n";
            $mailSendInfos['template'] = 'user-fo_order-new_order';
            $mailSendInfos['FO_URL'] = URL;
            $mailSendInfos['ORDER_ID'] = $this->id;
            break;
        }
        break;
      case 'messengerpost':
        switch ($this->website_origin) {
          case 'MOB':
            $mailSendInfos['subject'] = "Message concernant votre commande nÂ°".($this->alternate_id ? $this->alternate_id : $this->id);
            $mailSendInfos['headers'] = "From: Mobaneo - Service clients <commandes@mobaneo.com>\r\n".
              "Reply-To: Mobaneo - Service clients <commandes@mobaneo.com>\r\n";
            $mailSendInfos['template'] = 'user_mob-bo_orders-messenger_post';
            $mailSendInfos['FO_URL'] = $website_origin_url_list[WEBSITE_ORIGIN_MOBANEO];
            $mailSendInfos['ORDER_ID'] = $this->alternate_id ? $this->alternate_id : $this->id;
            break;
          case 'TC':
          default:
            $mailSendInfos['subject'] = "Message concernant votre commande nÂ°".$this->id;
            $mailSendInfos['headers'] = "From: Techni-Contact - Service commercial <sav@techni-contact.com>\r\n".
										"Reply-To: Service client Techni-Contact <sav@techni-contact.com> \r\n".
										"Bcc:  <commandes@techni-contact.com> \r\n";
            $mailSendInfos['template'] = 'user-bo_orders-messenger_post';
            $mailSendInfos['FO_URL'] = URL;
            $mailSendInfos['ORDER_ID'] = $this->id;
  
            break;
        }
        break;
    }
    return $mailSendInfos;
  }
  
  private function sendProcessingStatusMail($listMailsDesti = null) {
    if ($listMailsDesti)
      $this->setMultipleRecipients($listMailsDesti);
    
    $mailSendInfos = $this->getMailSendInfos('ProcessingStatusMail');
    
    $mail = new Email(array(
      'email' => $this->client->email.$this->recipients_mail_list,
      'subject' => $mailSendInfos['subject'],
      'headers' => $mailSendInfos['headers'],
      'template' => $mailSendInfos['template'],
      'data' => array(
        'FO_URL' => $mailSendInfos['FO_URL'],
        'FO_ACCOUNT_URL' => COMPTE_URL."contact-form.html?type=1&id=".$this->id,
        'ORDER_ID' => $this->id,
        'CUSTOMER_FIRSTNAME' => $this->prenom,
        'CUSTOMER_LASTNAME' => $this->nom,
        'ORDER_PROCESSING_STATUS' => self::getGlobalProcessingStatusText($this->processing_status)." ".$this->{self::getProcessingStatusTextFieldName($this->processing_status)},
        'PDF_RECLAMATION_URL' => URL.'media/reclamations-retours-tc.pdf'
      )
    ));
		$mail->send();
	
  }
  
  public function setMultipleRecipients($mailList = null){
    if (!empty($mailList)) {
      $listDesti = explode(', ', $mailList);
      foreach ($listDesti as $mailDesti)
        if (preg_match('/^[[:alnum:]]([-_.]?[[:alnum:]])*@[[:alnum:]]([-_.]?[[:alnum:]])*\.([a-z]{2,4})$/', $mailDesti))
          $testedListDesti[] = $mailDesti;
    }
    if (!empty($testedListDesti))
      $listdestimultiple = implode (', ', $testedListDesti);
    
    $listDestiMultiple = !empty($listdestimultiple) ? ', '.$listdestimultiple : '';
    $this->recipients_mail_list = $listDestiMultiple;
    
    return $this->recipients_mail_list;
  }
  
  public function sendClientEmail($listMailsDesti = null) {
    ob_start();
    ?>
    <table cellspacing="0" cellpadding="0" border="0">
    <div>
      <table cellspacing="1" cellpadding="2" border="1">
        <thead>
          <tr>
            <th>RÃ©f</th>
            <th>LibellÃ©</th>
            <th>Montant ht unitaire</th>
            <th>QuantitÃ©</th>
            <th>Montant total ht</th>
          </tr>
        </thead>
        <tbody>
       <?php foreach ($this->lines as $line) { ?>
          <tr>
            <td><?php echo (!empty($line->pdt_ref_id)) ? $line->pdt_ref_id : "-" ?></td>
            <td><?php echo $line->desc ?></td>
            <td>
              <?php echo sprintf('%.02f', $line->pu_ht + $line->et_ht) ?>
             <?php if ($line->et_ht > 0) : ?>
              <br/>dont Ã©co part : <?php echo sprintf('%.02f', $line->et_ht) ?>
             <?php endif ?>
            </td>
            <td><?php echo $line->quantity ?></td>
            <td>
              <?php echo sprintf('%.02f', $line->total_ht + $line->et_total_ht) ?>
             <?php if ($line->et_total_ht > 0) : ?>
              <br/>dont Ã©co part : <?php echo sprintf('%.02f', $line->et_total_ht) ?>
             <?php endif ?>
            </td>
          </tr>
         <?php if (!empty($line->promotion)) { ?>
          <tr>
            <td>&nbsp;</td>
            <td colspan="3">Promotion de <b><?php echo sprintf('%.02f', $line->promotion) ?>%</b></td>
            <td><?php echo sprintf('%.02f', -$line->promotion*$line->total_ht/100) ?></td>
          </tr>
         <?php } ?>
         <?php if (!empty($line->discount)) { ?>
          <tr>
            <td>&nbsp;</td>
            <td colspan="3">Remise de <b><?php echo sprintf('%.02f', $line->discount) ?>%</b></td>
            <td><?php echo sprintf('%0.2f', -$line->discount*$line->total_ht/100) ?></td>
          </tr>
         <?php } ?>
       <?php } ?>
        </tbody>
      </table>
      <br/>
      Sous-total HT : <b><?php echo sprintf('%.02f', $this->total_ht-$this->fdp_ht) ?>&euro;</b><br/>
      Frais de Port HT : <b><?php echo sprintf('%.02f', $this->fdp_ht) ?>&euro;</b><br/>
      Total HT : <b><?php echo sprintf('%.02f', $this->total_ht) ?>&euro;</b><br/>
      TVA : <b><?php echo sprintf('%.02f', $this->total_ttc-$this->total_ht) ?></b><br/>
      Total TTC : <b><?php echo sprintf('%.02f', $this->total_ttc) ?>&euro;</b><br/>
      <br/>
      <br/>
      <u>Adresse de livraison</u><br/>
        <b><?php echo $this->nom2 ?> <?php echo $this->prenom2 ?></b><br/>
        <?php echo $this->societe2 != "" ? $this->societe2 . "<br/>\n" : "\n" ?>
        <?php echo $this->adresse2 ?><br/>
        <?php echo $this->cadresse2 ?> <?php echo $this->cp2 ?> <?php echo $this->ville2 ?><br/>
        <?php echo $this->pays2 ?><br/>
        <?php echo $this->societe2 != "" ? "" : "<br/>" ?>
      <br/>
      <u>Adresse de facturation</u><br/>
        <b><?php echo $this->nom ?> <?php echo $this->prenom ?></b><br/>
        <?php echo $this->societe != "" ? $this->societe . "<br/>\n" : "\n" ?>
        <?php echo $this->adresse ?><br/>
        <?php echo $this->cadresse ?> <?php echo $this->cp ?> <?php echo $this->ville ?><br/>
        <?php echo $this->pays ?><br/>
        <?php echo $this->societe != "" ? "" : "<br/>" ?>
    </div>
    <?php
    $cart_html = ob_get_clean();
    ob_end_clean();
    
    $idList = Nuukik::get(125, 'products', array($this->lines[0]->pdt_id, 'recommendation'), array('user' => $this->client_id));
    $recoPdtHtml = "";
    if (!is_string($idList)) {
      $recoPdtList = Utils::get_pdts_infos($idList['pdtIdList'], $idList['idTCList'], 'simple-block');
      $recoPdtHtml = Nuukik::get_mail_html($recoPdtList, "?utm_source=nuukik&utm_medium=email&utm_campaign=reco-nuukik-mail-ar-commande&campaignID=999995");
    }
    
    if ($listMailsDesti)
      $this->setMultipleRecipients ($listMailsDesti);
    
    $mailSendInfos = $this->getMailSendInfos('clientemail');
    
    $mail = new Email(array(
      'email' => $this->email.$this->recipients_mail_list,
      'subject' => $mailSendInfos['subject'],
      'headers' => $mailSendInfos['headers'],
      'template' => $mailSendInfos['template'],
      'data' => array(
        'FO_URL' => $mailSendInfos['FO_URL'],
        'FO_ACCOUNT_URL_INFOS' => COMPTE_URL."infos.html",
        'CUSTOMER_FIRSTNAME' => $this->prenom,
        'CUSTOMER_LASTNAME' => $this->nom,
        'ORDER_ID' => $mailSendInfos['ORDER_ID'],
        'ORDER_PAYMENT_TYPE' => self::getPaymentMeanText($this->payment_mean),
        'ORDER_COMPLETE_CONTENT' => $cart_html,
        'RECOMMENDED_PRODUCTS_BLOCK' => $recoPdtHtml,
        'ORDER_FORM_URL' => PDF_URL."commande/".$this->web_id."#zoom=100"
      )
    ));
    //$web_id = $this->web_id;
    //require WWW_PATH.'pdf/order.php';
    //$mail->addAttachment(PDF_ORDER."Commande ".$this->id.".pdf");
    $mail->send();
  }
  
  public static function getProcessingStatusTextFieldName($status) {
    switch ($status) {
      case self::GLOBAL_PROCESSING_STATUS_WAITING_PAYMENT_VALIDATION:
      case self::GLOBAL_PROCESSING_STATUS_WAITING_VALIDATION:
      case self::GLOBAL_PROCESSING_STATUS_WAITING_CB:
      case self::GLOBAL_PROCESSING_STATUS_WAITING_PROCESSING:
      case self::GLOBAL_PROCESSING_STATUS_PROCESSING:
        break;
      case self::GLOBAL_PROCESSING_STATUS_ASS_OPEN:
        return 'sav_opened_text';
      case self::GLOBAL_PROCESSING_STATUS_ASS_CLOSED:
        return 'sav_closed_text';
      case self::GLOBAL_PROCESSING_STATUS_FORECAST_SHIPPING_DATE:
        return 'forecast_shipping_text';
      case self::GLOBAL_PROCESSING_STATUS_PARTLY_SHIPPED:
        return 'partly_shipped_text';
      case self::GLOBAL_PROCESSING_STATUS_SHIPPED:
        return 'shipped_text';
      case self::GLOBAL_PROCESSING_STATUS_PARTLY_CANCELED:
        return 'partly_cancelled_text';
      case self::GLOBAL_PROCESSING_STATUS_CANCELED:
        return 'cancelled_text';
    }
    return 'shipped_text';
  }
  
  private function getNoIdData() {
    if (!isset($this->lines))
      $this->refreshRelated('lines');
    
    $dataArray = $this->toArray();
    // deleting id's
    unset($dataArray['id']);
    foreach($dataArray['lines'] as &$line)
      unset($line['id']);
    
    return $dataArray;
  }
  
  const TYPE_INTERNET = 0;
  const TYPE_ESTIMATE = 1;
  const TYPE_PHONE = 2;
  const TYPE_FAX = 3;
  const TYPE_MAIL = 4;
  const TYPE_MARKETPLACE = 5;
  const TYPE_OTHER = 9;
  public static $typeList = array(
    self::TYPE_INTERNET => "Internet",
    self::TYPE_ESTIMATE => "Lead",
    self::TYPE_PHONE => "Tel",
    self::TYPE_FAX => "Fax",
    self::TYPE_MAIL => "Courrier",
    self::TYPE_MARKETPLACE => "Marketplace",
    self::TYPE_OTHER => "Autre"
  );
  public static function getTypeText($const) {
    return isset(self::$typeList[$const]) ? self::$typeList[$const] : "";
  }
  
  const WAITING_INFO_NO = 0;
  const WAITING_INFO_SUP = __MSGR_CTXT_SUPPLIER_TC_ORDER__;
  const WAITING_INFO_CLI = __MSGR_CTXT_CUSTOMER_TC_CMD__;
  const WAITING_INFO_SUP_CLI = __MSGR_CTXT_ORDER_CMD__;
  public static $waitingInfoList = array(
    self::WAITING_INFO_NO => "non",
    self::WAITING_INFO_SUP => "fournissseur",
    self::WAITING_INFO_CLI => "client",
    self::WAITING_INFO_SUP_CLI => "client/fournisseur"
  );
  public static function getWaitingInfosText($const) {
    return isset(self::$waitingInfoList[$const]) ? self::$waitingInfoList[$const] : "";
  }
  
  const ACTIVITY_VPC_COMPTANT = 0;
  const ACTIVITY_VPC_DIFFERE = 1;
  const ACTIVITY_VPC_EXPORT_COMPTANT = 2;
  const ACTIVITY_VPC_EXPORT_DIFFERE = 3;
  const ACTIVITY_VPC_INTRA_COMPTANT = 4;
  const ACTIVITY_VPC_INTRA_DIFFERE = 5;
  const ACTIVITY_ANNONCEUR = 10;
  const ACTIVITY_ANNONCEUR_EXPORT = 11;
  const ACTIVITY_ANNONCEUR_INTRA = 12;
  const ACTIVITY_CATALOG = 20;
  const ACTIVITY_CATALOG_INTRA = 21;
  const ACTIVITY_LOCATION_FICHIERS = 30;
  const ACTIVITY_LOCATION_BANNIERE_PUB = 255;
  public static $activityList = array(
    self::ACTIVITY_VPC_COMPTANT => "VPC comptant",
    self::ACTIVITY_VPC_DIFFERE => "VPC diffÃ©rÃ©",
    self::ACTIVITY_VPC_EXPORT_COMPTANT => "VPC export comptant",
    self::ACTIVITY_VPC_EXPORT_DIFFERE => "VPC export diffÃ©rÃ©",
    self::ACTIVITY_VPC_INTRA_COMPTANT => "VPC intra comptant",
    self::ACTIVITY_VPC_INTRA_DIFFERE => "VPC intra diffÃ©rÃ©",
    self::ACTIVITY_ANNONCEUR => "Annonceur",
    self::ACTIVITY_ANNONCEUR_EXPORT => "Annonceur export",
    self::ACTIVITY_ANNONCEUR_INTRA => "Annonceur intra",
    self::ACTIVITY_CATALOG => "Catalogue",
    self::ACTIVITY_CATALOG_INTRA => "Catalogue intra",
    self::ACTIVITY_LOCATION_FICHIERS => "Location fichiers",
    self::ACTIVITY_LOCATION_BANNIERE_PUB => "Location banniÃ¨re pub"
  );
  public static function getActivityText($const) {
    return isset(self::$activityList[$const]) ? self::$activityList[$const] : "";
  }
  public static $activityNoFdpList = array( // no fdp
    self::ACTIVITY_ANNONCEUR,
    self::ACTIVITY_ANNONCEUR_EXPORT,
    self::ACTIVITY_ANNONCEUR_INTRA,
    self::ACTIVITY_CATALOG,
    self::ACTIVITY_CATALOG_INTRA,
    self::ACTIVITY_LOCATION_FICHIERS,
    self::ACTIVITY_LOCATION_BANNIERE_PUB
  );
  public static $activityNoTvaList = array( // no tva
    self::ACTIVITY_VPC_EXPORT_COMPTANT,
    self::ACTIVITY_VPC_EXPORT_DIFFERE,
    self::ACTIVITY_VPC_INTRA_COMPTANT,
    self::ACTIVITY_VPC_INTRA_DIFFERE,
    self::ACTIVITY_ANNONCEUR_EXPORT,
    self::ACTIVITY_ANNONCEUR_INTRA,
    self::ACTIVITY_CATALOG_INTRA
  );
  public static $activityTvaIntraList = array( // tva intra
    self::ACTIVITY_VPC_INTRA_COMPTANT,
    self::ACTIVITY_VPC_INTRA_DIFFERE,
    self::ACTIVITY_ANNONCEUR_INTRA,
    self::ACTIVITY_CATALOG_INTRA
  );
  public static $activityDeferredList = array(
    self::ACTIVITY_VPC_DIFFERE,
    self::ACTIVITY_VPC_INTRA_DIFFERE,
    self::ACTIVITY_VPC_EXPORT_DIFFERE
  );
  
  const PAYMENT_MEAN_BC_TBD = 0;
  const PAYMENT_MEAN_BC_CB = 1;
  const PAYMENT_MEAN_BC_VISA = 2;
  const PAYMENT_MEAN_BC_MASTERCARD = 3;
  const PAYMENT_MEAN_BC_AMEX = 4;
  const PAYMENT_MEAN_PAYPAL = 5;
  const PAYMENT_MEAN_CHEQUE = 10;
  const PAYMENT_MEAN_VIREMENT = 20;
  const PAYMENT_MEAN_DIFFERE = 30;
  const PAYMENT_MEAN_CB = 40;
  const PAYMENT_MEAN_MANDAT = 50;
  const PAYMENT_BANKER_ORDER = 60;
  const PAYMENT_BILL_OF_EXCHANGE = 70;
  public static $paymentMeanList = array(
    self::PAYMENT_MEAN_BC_TBD => "Carte Bancaire (type en attente)",
    self::PAYMENT_MEAN_BC_CB => "Carte Bancaire (Carte Bleue)",
    self::PAYMENT_MEAN_BC_VISA => "Carte Bancaire (Visa)",
    self::PAYMENT_MEAN_BC_MASTERCARD => "Carte Bancaire (Mastercard)",
    self::PAYMENT_MEAN_BC_AMEX => "Carte Bancaire (American Express)",
    self::PAYMENT_MEAN_PAYPAL => "Paypal",
    self::PAYMENT_MEAN_CHEQUE => "ChÃ¨que",
    self::PAYMENT_MEAN_VIREMENT => "Virement bancaire",
    self::PAYMENT_MEAN_DIFFERE => "Paiement diffÃ©rÃ©",
    self::PAYMENT_MEAN_CB => "Contre-remboursement",
    self::PAYMENT_MEAN_MANDAT => "Mandat administratif",
    self::PAYMENT_BANKER_ORDER => "PrÃ©lÃ¨vement",
    self::PAYMENT_BILL_OF_EXCHANGE  => "Lettre de change"
  );
  public static function getPaymentMeanText($const) {
    return isset(self::$paymentMeanList[$const]) ? self::$paymentMeanList[$const] : "";
  }
  
  const PAYMENT_STATUS_WAITING_BANC_CONFIRMATION = 0;
  const PAYMENT_STATUS_WAITING_CHECK = 1;
  const PAYMENT_STATUS_WAITING_TRANSFER = 2;
  const PAYMENT_STATUS_DEFERRED_TO_VALIDATE = 3;
  const PAYMENT_STATUS_CASH_ON_DELIVERY_TO_VALIDATE = 4;
  const PAYMENT_STATUS_MONEY_ORDER_TO_VALIDATE = 5;
  const PAYMENT_STATUS_PAID = 10;
  const PAYMENT_STATUS_DEFERRED_VALIDATED = 11;
  public static $paymentStatusList = array(
    self::PAYMENT_STATUS_WAITING_BANC_CONFIRMATION => "Attente confirmation BNP",
    self::PAYMENT_STATUS_WAITING_CHECK => "Attente chÃ¨que",
    self::PAYMENT_STATUS_WAITING_TRANSFER => "Attente virement",
    self::PAYMENT_STATUS_DEFERRED_TO_VALIDATE => "Paiement diffÃ©rÃ© Ã  valider",
    self::PAYMENT_STATUS_CASH_ON_DELIVERY_TO_VALIDATE => "Paiement par contre-remboursement Ã  valider",
    self::PAYMENT_STATUS_MONEY_ORDER_TO_VALIDATE => "Paiement par mandat administratif Ã  valider",
    self::PAYMENT_STATUS_PAID => "PayÃ©",
    self::PAYMENT_STATUS_DEFERRED_VALIDATED => "Paiement diffÃ©rÃ© validÃ©"
  );
  public static function getPaymentStatusText($const) {
    return isset(self::$paymentStatusList[$const]) ? self::$paymentStatusList[$const] : "";
  }

  const GLOBAL_PROCESSING_STATUS_WAITING_PAYMENT_VALIDATION = 0;
  const GLOBAL_PROCESSING_STATUS_WAITING_VALIDATION = 1;
  const GLOBAL_PROCESSING_STATUS_WAITING_CB = 2;
  const GLOBAL_PROCESSING_STATUS_WAITING_PROCESSING = 10;
  const GLOBAL_PROCESSING_STATUS_PROCESSING = 20;
  const GLOBAL_PROCESSING_STATUS_ASS_OPEN = 21;
  const GLOBAL_PROCESSING_STATUS_ASS_CLOSED = 22;
  const GLOBAL_PROCESSING_STATUS_FORECAST_SHIPPING_DATE = 25;
  const GLOBAL_PROCESSING_STATUS_PARTLY_SHIPPED = 30;
  const GLOBAL_PROCESSING_STATUS_SHIPPED = 40;
  const GLOBAL_PROCESSING_STATUS_PARTLY_CANCELED = 90;
  const GLOBAL_PROCESSING_STATUS_CANCELED = 99;
  public static $globalProcessingStatusList = array(
    self::GLOBAL_PROCESSING_STATUS_WAITING_PAYMENT_VALIDATION => "Attente validation paiement",
    self::GLOBAL_PROCESSING_STATUS_WAITING_VALIDATION => "Attente validation opÃ©rateur",
    self::GLOBAL_PROCESSING_STATUS_WAITING_CB => "Attente contre-remboursement",
    self::GLOBAL_PROCESSING_STATUS_WAITING_PROCESSING => "Commande en attente de traitement",
    self::GLOBAL_PROCESSING_STATUS_PROCESSING => "Commande en cours de traitement",
    self::GLOBAL_PROCESSING_STATUS_ASS_OPEN => "SAV ouvert",
    self::GLOBAL_PROCESSING_STATUS_ASS_CLOSED => "SAV fermÃ©",
    self::GLOBAL_PROCESSING_STATUS_FORECAST_SHIPPING_DATE => "Date d'expÃ©dition prÃ©visionnelle",
    self::GLOBAL_PROCESSING_STATUS_PARTLY_SHIPPED => "Commande partiellement expÃ©diÃ©e",
    self::GLOBAL_PROCESSING_STATUS_SHIPPED => "Commande expÃ©diÃ©e",
    self::GLOBAL_PROCESSING_STATUS_PARTLY_CANCELED => "Commande partiellement annulÃ©e",
    self::GLOBAL_PROCESSING_STATUS_CANCELED => "Commande annulÃ©e"
  );
  public static function getGlobalProcessingStatusText($const) {
    return isset(self::$globalProcessingStatusList[$const]) ? self::$globalProcessingStatusList[$const] : "";
  }
  
  const PAYMENT_MODE_AT_ORDER = 1;
  const PAYMENT_MODE_30_DAYS_INVOICING = 2;
  const PAYMENT_MODE_50_ORDER_50_INVOICING = 3;
  const PAYMENT_MODE_MONEY_ORDER = 4;
  public static $paymentModeList = array(
    self::PAYMENT_MODE_AT_ORDER => "A la commande",
    self::PAYMENT_MODE_30_DAYS_INVOICING => "30 jours date de facture",
    self::PAYMENT_MODE_50_ORDER_50_INVOICING => "50% Ã  la commande 50% Ã  rÃ©ception",
    self::PAYMENT_MODE_MONEY_ORDER => "Mandat administratif",
  );
  public static function getPaymentModeText($const) {
    return isset(self::$paymentModeList[$const]) ? self::$paymentModeList[$const] : "";
  }

}