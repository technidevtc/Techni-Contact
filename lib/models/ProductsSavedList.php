<?php

/**
 * ProductsSavedList
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ProductsSavedList extends BaseProductsSavedList
{
  
  public function setUp() {
    parent::setUp();
    $this->hasMany('Products as products', array(
        'local' => 'product_id',
        'foreign' => 'id'
      )
    );
    $this->hasMany('ProductsFr as products_fr', array(
        'local' => 'product_id',
        'foreign' => 'id'
      )
    );
    $this->hasOne('Clients as clients', array(
        'local' => 'Client_id',
        'foreign' => 'id'
      )
    );
    $this->hasOne('ProductsFamilies as products_families', array(
        'local' => 'product_id',
        'foreign' => 'idproduct'
      )
    );
  }
  
  private $session;
  
  function construct(){
    $db = DBHandle::get_instance();
    $this->session = isset($_SESSION) ? $_SESSION : new UserSession($db);
  }
  
/*
  * whether logged or not, adds a product to the saved product list
  */
  function saveProduct($idProduct){
    $idProduct = filter_var($idProduct, FILTER_SANITIZE_NUMBER_INT);

    if(!$this->session['logged']){
      $savedProductsList = $_COOKIE['saved_products_list'];
      if (!empty($savedProductsList)){
        $savedProductsList = filter_input(INPUT_COOKIE, "saved_products_list", FILTER_SANITIZE_STRING);
        $savedProductsList = explode("|",$savedProductsList);
      }else
        $savedProductsList = array();
      if(!in_array($idProduct, $savedProductsList))
        array_push($savedProductsList, $idProduct);
      
      $savedProductsList = implode("|",$savedProductsList);

      setcookie('saved_products_list', $savedProductsList, time() + 48*3600, '/', DOMAIN);

    }  else {
      
      $savedProductsList = $_COOKIE['saved_products_list'];

      if (!empty($savedProductsList)){
        $savedProductsList = filter_input(INPUT_COOKIE, "saved_products_list", FILTER_SANITIZE_STRING);
        $savedProductsList = explode("|",$savedProductsList);

        foreach ($savedProductsList as $savedProduct){
          $isInList = Doctrine_Query::create()
          ->select()
          ->from('ProductsSavedList')
          ->where('client_id = ? AND product_id = ?', array($this->session['userID'], $idProduct))
          ->fetchOne(array());
          
          if(!$isInList){
            $this->client_id = $this->session['userID'];
            $this->product_id = $savedProduct;
            $this->create_time = time();
            $this->save();
          }
        }
        $savedProductsList = implode("|",$savedProductsList);
        unset($savedProductsList);

        setcookie('saved_products_list', '', time() -3600, '/', DOMAIN);

      }  
      
      if(!empty($idProduct))
        if(!$this->isProductInSavedList($idProduct)){
          $this->client_id = $this->session['userID'];
          $this->product_id = $idProduct;
          $this->create_time = time();
          $this->save();
        }
    }
  }

/*
  * whether logged or not, removes a product to the saved product list
  */
  function removeProduct($idProduct){
    $idProduct = filter_var($idProduct, FILTER_SANITIZE_NUMBER_INT);
    
    if(!$this->session['logged']){
      
      $savedProductsList = $_COOKIE['saved_products_list'];

      if (!empty($savedProductsList)){
        $savedProductsList = explode("|",$savedProductsList);
      }else
        $savedProductsList = array();

      foreach($savedProductsList as $key => $savedProduct)
        if($idProduct == $savedProduct){
          unset($savedProductsList[$key]);
          break;
        }

      $savedProductsList = implode("|",array_values($savedProductsList));

      setcookie('saved_products_list', $savedProductsList, time() + 48*3600, '/', DOMAIN);

    }  else {
 
      Doctrine_Query::create()
        ->delete('ProductsSavedList')
        ->where('client_id = ? AND product_id = ?', array($this->session['userID'], $idProduct))
        ->limit(1)
        ->execute();
      
    }
  }
  
/*
  * whether logged or not, empties the saved product list
  */
  function emptyList(){

    if(!$this->session['logged'])
      setcookie('saved_products_list', '', time() - 3600, '/', DOMAIN);
    else {
      setcookie('saved_products_list', '', time() -3600, '/', DOMAIN);

      Doctrine_Query::create()
        ->delete('ProductsSavedList')
        ->where('client_id = ?', $this->session['userID'])
        ->execute();

    }
  }

/*
  * whether logged or not, checks if a given product belongs to the saved product list
  */
  function isProductInSavedList($idProduct){
    $idProduct = filter_var($idProduct, FILTER_SANITIZE_NUMBER_INT);

    if(!$this->session['logged']){
      $savedProductsList = $_COOKIE['saved_products_list'];

    
      if (!empty($savedProductsList)){

        $savedProductsList = filter_input(INPUT_COOKIE, "saved_products_list", FILTER_SANITIZE_STRING);
        $savedProductsList = explode("|",$savedProductsList);
        
        return in_array($idProduct, $savedProductsList) ? true: false;
      }  else 
        return false;
    }else{
      $isInList = Doctrine_Query::create()
        ->select()
        ->from('ProductsSavedList')
        ->where('client_id = ? AND product_id = ?', array($this->session['userID'], $idProduct))
        ->fetchOne(array());
        return $isInList ? true : false;
    }
  }

/*
  * whether logged or not, returns the saved product list
  */
  function getList(){

    if(!$this->session['logged']){
      $savedProductsList = $_COOKIE['saved_products_list'];

      if (!empty($savedProductsList)){

        $savedProductsList = filter_input(INPUT_COOKIE, "saved_products_list", FILTER_SANITIZE_STRING);
        $savedProductsList = explode("|",$savedProductsList);
        
        return $savedProductsList;
      }  else 
        return false;
    }else{
      
      $list = Doctrine_Query::create()
        ->select('product_id')
        ->from('ProductsSavedList')
        ->where('client_id = ?', $this->session['userID'])
        ->orderBy('create_time DESC')
        ->fetchArray(array(), Doctrine_core::HYDRATE_ARRAY);

  foreach($list as $pdt)
    $returnList[] = $pdt['product_id'];
  
        return !empty($returnList) ? $returnList : false;
    }
  }
  
/*
  * whether logged or not, counts the number of products in the saved product list
  */
  function count(){

    if(!$this->session['logged']){
      $savedProductsList = $_COOKIE['saved_products_list'];
    
      if (!empty($savedProductsList)){

        $savedProductsList = filter_input(INPUT_COOKIE, "saved_products_list", FILTER_SANITIZE_STRING);
        $savedProductsList = explode("|",$savedProductsList);
        
        return count($savedProductsList);
      }  else 
        return false;
    }else{
      $list = Doctrine_Query::create()
        ->select('product_id')
        ->from('ProductsSavedList')
        ->where('client_id = ?', $this->session['userID'])
        ->count();
        return !empty($list) ? $list : false;
    }
  }
  
  /*
   * when logging, moves the saved product list from session to db
   */
    function setAsLogged(){
    $idProduct = filter_var($idProduct, FILTER_SANITIZE_NUMBER_INT);

    if($this->session['logged']) {
      
      $savedProductsList = $_COOKIE['saved_products_list'];

      if (!empty($savedProductsList)){
        $savedProductsList = filter_input(INPUT_COOKIE, "saved_products_list", FILTER_SANITIZE_STRING);
        $savedProductsList = explode("|",$savedProductsList);

        foreach ($savedProductsList as $savedProduct){
          $this->client_id = $this->session['userID'];
          $this->product_id = $savedProduct;
          $this->create_time = time();
          $this->save();
        }
        $savedProductsList = implode("|",$savedProductsList);
        unset($savedProductsList);

        setcookie('saved_products_list', '', time() -3600, '/', DOMAIN);

      }  
    }
  }
  
  function sendMailToCustomer(){
    
    $db = DBHandle::get_instance();
    
    if($this->session['logged']) {
      $user = Doctrine_Query::create()
              ->select()
              ->from('Clients')
              ->where('id = ?', $this->session['userID'])
              ->fetchOne();
      $listProduct = $this->getList();
      
      if (!empty($listProduct)) {
        $product = Doctrine_Query::create()
          ->select("p.*,IFNULL(rc.price, p.price) AS price,  pfr.name as name, pfr.fastdesc as fastdesc, pfr.ref_name as ref_name, pf.id family AS catID, a.category AS adv_cat, pfr.delai_livraison AS delivery_time,
            a.delai_livraison AS adv_delivery_time, (IFNULL(rc.price, p.price) REGEXP '^[1-9]{1}[0-9]*((\\.|,)[0-9]+){0,1}$') AS hasPrice,
              (IFNULL(rc.price, p.price) REGEXP '^[1-9]{1}[0-9]*((\\.|,)[0-9]+){0,1}$' AND a.category = ".__ADV_CAT_SUPPLIER__.") AS saleable,
              (p.as_estimate + a.as_estimate) as product_as_estimate")
          ->from('Products p')
          ->innerJoin('p.product_fr pfr')
          ->innerJoin('p.families pf')
          ->innerJoin('p.advertiser a')
          ->leftJoin('p.references rc')
          ->whereIn('p.id', $listProduct)
          ->fetchArray();

        $table = '<table>
            <thead>
              <tr>
                <th></th>
                <th>Description</th>
                <th></th>
              </tr>
            </thead>
            <tbody>';
        
        foreach($product as $pdt){
          // Shipping fee
          $res = $db->query("select config_name, config_value from config where config_name = 'fdp' or config_name = 'fdp_franco' or config_name = 'fdp_sentence'", __FILE__, __LINE__ );
          while ($rec = $db->fetch($res)) {
            $$rec[0] = $rec[1];
          }
          
          $pdt["shipping_fee"] = empty($pdt["shipping_fee"]) ? ($pdt["shipping_fee"] = $pdt["hasPrice"] ? ($pdt["price"] > $fdp_franco ? "Offert" : $fdp." € HT") : "N/D") : $pdt["shipping_fee"]." € HT";
          if (empty($pdt["delivery_time"]))
            $pdt["delivery_time"] = $pdt["adv_delivery_time"];
          $pdt["url"] = URL."produits/".$pdt["catID"]."-".$pdt["id"]."-".$pdt["ref_name"].".html";
          $pdt["pic_url"] = is_file(PRODUCTS_IMAGE_INC."thumb_big/".$pdt["id"]."-1".".jpg") ? PRODUCTS_IMAGE_URL."thumb_big/".$pdt["id"]."-1".".jpg" : PRODUCTS_IMAGE_URL."no-pic-thumb_big.gif";;
        
          $table .= '<tr>
                <td><a href="'.$pdt["url"].'"><img src="'.$pdt["pic_url"].'" alt="" /></a></td>
                <td>'.$pdt["fastdesc"].'</td>
                <td><a href="'.$pdt["url"].'">Voir produit</a></td>
              </tr>';
        }
        $table .= '</tbody></table>';

      } else {
        $table = 'Votre liste de produits sauvegardés est vide…';
      }
    
      $mail = new Email(array(
        'email' => $user->email,
        'subject' => "Message concernant votre liste de produits sauvegardés",
        'headers' => "From: Techni-Contact - Service client Techni-Contact <test@techni-contact.com>\nReply-To: Service client Techni-Contact <test@techni-contact.com>\r\n",
        'template' => 'user-fo_products-saved-list_send-list',
        'data' => array(
          'CLIENT_FIRSTNAME' => $e['prenom'],
          'CLIENT_LASTNAME' => $e['nom'],
          'SAVED_PRODUCTS_LIST_TABLE' => $table
        )
      ));
      $mail->send();
    }
    
  }
  
}