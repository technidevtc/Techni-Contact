<?php

/**
 * SupplierOrder
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class SupplierOrder extends BaseSupplierOrder
{
  public function setUp() {
    parent::setUp();
    $this->hasOne('Order as order', array(
        'local' => 'order_id',
        'foreign' => 'id'
      )
    );
    /*$this->hasMany('OrderLine as lines', array(
        'local' => 'order_id',
        'foreign' => 'order_id'
      )
    );*/
    $this->hasOne('Advertisers as supplier', array(
        'local' => 'sup_id',
        'foreign' => 'id'
      )
    );
    $this->hasOne('BoUsers as sender', array(
        'local' => 'sender_id',
        'foreign' => 'id'
      )
    );
  }
  
  public function construct() {
    $this->mapValue('send_mail', false);
    $this->mapValue('stotal_ht', 0);
    $this->mapValue('total_tva', 0);
    $this->mapValue('rid', 0);
  }
  
  public function postHydrate($event) {
    $data = $event->data;
    $data['send_mail'] = false;
    $data['stotal_ht'] = $data['total_ht'] - $data['fdp_ht'];
    $data['total_tva'] = $data['total_ttc'] - $data['total_ht'];
    $data['rid'] = $data['sup_id']."-".$data['order_id'];
    $event->data = $data;
  }
  
  protected $noCascadingRelations;
  
  public function preSave($event) {
    
    $mv = $this->getModified(); // modified values 
    
    if (isset($mv['processing_status'])) {
      $this->processProcessingStatus();
    }
    
    // prevents from updating user account from here
    $this->noCascadingRelations = array();
    if (isset($this->sender)) $this->noCascadingRelations[] = 'sender';
    foreach ($this->noCascadingRelations as $relation)
      $this->clearRelated($relation);
  }
  
  public function postSave($event) {
    foreach ($this->noCascadingRelations as $relation)
      $this->refreshRelated($relation);
  }
  
  public function setProcessingStatus($status, $send_mail = false) {
    if (isset(self::$processingStatusList[$status])) {
      $this->processing_status = $status;
      $this->send_mail = !!$send_mail;
      $this->save();
    }
  }
  
  protected function processProcessingStatus() {
    global $user;
    
    $this->processing_time = time();
    switch ($this->processing_status) {
      case self::PROCESSING_STATUS_NOT_VIEWED:
        $this->seen_time = 0;
        $this->arc_time = 0;
        $this->arc = "";
        $this->cancellation = 0;
        break;
        
      case self::PROCESSING_STATUS_WAITING_ARC:
        if (!$this->seen_time)
          $this->seen_time = time();
        $this->arc_time = 0;
        $this->arc = "";
        $this->cancellation = 0;
        break;
        
      case self::PROCESSING_STATUS_ARC_RECEIVED:
      case self::PROCESSING_STATUS_WAITING_PROCESSING:
      case self::PROCESSING_STATUS_PROCESSING:
      case self::PROCESSING_STATUS_FORECAST_SHIPPING_DATE:
      case self::PROCESSING_STATUS_PARTLY_SHIPPED:
      case self::PROCESSING_STATUS_SHIPPED:
        if (!$this->seen_time)
          $this->seen_time = time();
        if (!empty($this->arc) && empty($this->arc_time))
          $this->arc_time = time();
        $this->cancellation = 0;
        break;
        
      case self::PROCESSING_STATUS_WAITING_INFOS:
        $this->cancellation = 0;
        break;
        
      case self::PROCESSING_STATUS_CANCELLED:
        $this->cancellation = 1;
        $this->send_mail = false;
        
        $m = new Messenger();
        $m->context = __MSGR_CTXT_SUPPLIER_TC_ORDER__;
        $m->type_sender = __MSGR_USR_TYPE_BOU__;
        $m->id_sender = $user->id;
        $m->type_recipient = __MSGR_USR_TYPE_ADV__;
        $m->id_recipient = $this->sup_id;
        $m->reference_to = $this->id;
        $m->text = "Ordre fournisseur annulé le ".date('d/m/Y à H:i')." par ".$user->name."\n".
                   "Raison : ".$this->cancellation_reason;
        $m->setSupplierOrder($this);
        $m->save();
        
        $this->sendOrderCancelledEmail();
        break;
    }
    
    /*if ($this->send_mail) {
      $mail = new Email(array(
        "email" => $this->order->client->email,
        "subject" => "Suivi de votre commande ".$this->id,
        "headers" => "From: Service achat Techni-Contact <achat@techni-contact.com>\nReply-To: Service achat Techni-Contact <achat@techni-contact.com>\r\n",
        "template" => "user-bo_orders-order_status_update",
        "data" => array(
          "FO_URL" => URL,
          "FO_ACCOUNT_URL" => COMPTE_URL."contact-form.html?id=".$this->id."&type=1",
          "ORDER_ID" => $this->id,
          "CUSTOMER_FIRSTNAME" => $this->order->client->prenom,
          "CUSTOMER_LASTNAME" => $this->order->client->nom,
          "ORDER_PROCESSING_STATUS" => self::getProcessingStatusText($this->processing_status)." ".$this->getProcessingStatusStateText()
        )
      ));
      $mail->send();
    }*/
  }
  
  // only update supplier order related info and supplier comment for each line
  public function updateWithLines($data) {
    $this->synchronizeWithArray($data);
    
    // only update supplier comment
    if (!empty($data['lines'])) {
      $lineById = array();
      foreach ($data['lines'] as $v)
        $lineById[$v['id']] = $v;
      $ol = Doctrine_Query::create()
          ->select('*')
          ->from('OrderLine')
          ->where('order_id = ?', $this->order_id)
          ->andWhere('sup_id = ?', $this->sup_id)
          ->execute();
      foreach ($ol as $line) {
        if ($lineById[$line->id])
          $line->sup_comment = $lineById[$line->id]['sup_comment'];
      }
      $ol->save();
    }
    
    $this->save();
    
    return $this->toArray();
  }
  
  public function send($comment) {
    global $user;
    
    $this->mail_comment = $comment;
    $this->mail_sent = 1;
    $this->mail_time = time();
    $this->sender_id = $user->id;

    // send mails
    $this->sendTcMail();
    $this->sendPartnerMail();
    
    $this->save();
    
    return $this->toArray();
  }
  
  private function sendTcMail() {
    // we always do a request here to be sure that we only have the current supplier related order lines
    $ol = Doctrine_Query::create()
        ->select('*')
        ->from('OrderLine')
        ->where('order_id = ?', $this->order_id)
        ->andWhere('sup_id = ?', $this->sup_id)
        ->execute(array(), Doctrine_Core::HYDRATE_ARRAY);

    ob_start();
    ?>
    <div>
      <table class="liste_produits_popup">
        <thead>
          <tr>
            <th>Image</th>
            <th>Ref TC</th>
            <th>Ref Fournisseur</th>
            <th>Prix fournisseur Unitaire</th>
            <th>Qt&eacute;</th>
            <th>Prix total HT</th>
          </tr>
        </thead>
        <tbody>
         <?php foreach ($ol as $line) : ?>
          <tr>
            <td class="center">
             <?php if (!empty($line['pdt_ref_id'])) : ?>
              <img src="<?php echo Utils::get_secure_pdt_pic_url($line['pdt_ref']) ?>" alt=""/>
             <?php else : ?>
              <img src="<?php echo Utils::get_secure_dft_pdt_pic_url() ?>" alt=""/>
             <?php endif ?>
            </td>
            <td class="center">
             <?php if (!empty($line['pdt_ref_id'])) : ?>
              <a href="<?php echo ADMIN_URL."products/edit.php?id=".$line['pdt_id'] ?>"><?php echo $line['pdt_ref_id'] ?></a>
             <?php else : ?>
              -
             <?php endif ?>
            </td>
            <td class="center"><?php echo $line['sup_ref'] ?></td>
            <td class="ref-prix"><?php echo sprintf("%.02f", $line['pau_ht']+$line['et_ht']) ?></td>
            <td class="right"><?php echo $line['quantity'] ?></td>
            <td class="ref-prix"><?php echo sprintf("%.02f", $line['total_a_ht']+$line['et_total_ht']) ?></td>
          </tr>
         <?php endforeach ?>
        </tbody>
      </table>
      <br/>
      <br/>
      <table class="libelle_total">
        <tr>
          <td class="text">Total commande HT</td>
          <td class="valeur"><?php echo sprintf("%.02f", $this->total_ht) ?></td>
        </tr>
        <tr>
          <td class="text">Total commande TTC</td>
          <td class="valeur"><?php echo sprintf("%.02f", $this->total_ttc) ?></td>
        </tr>
      </table>
    </div>
    <?php
    $cart_html = ob_get_clean();
    ob_end_clean();
    
    $supplier_email = !empty($this->supplier->econtact) ? $this->supplier->econtact : $this->supplier->email;
    
    // TC mail
    $mail = new Email(array(
      'email' => 'achat@techni-contact.com',
      'subject' => "Confirmation envoi commande ".$this->rid." à ".$this->supplier->nom1,
      'headers' => "From: achat@techni-contact.com\nReply-To: ".$supplier_email."<".$supplier_email.">\r\n",
      'template' => 'advertiser-bo_commandes-TC_info',
      'data' => array(
        'EXP_DATE' => date('d/m/Y - H:i:s'),
        'ADVERTISER_NAME' => $this->supplier->nom1,
        'OPERATOR_NAME' => $this->sender->name,
        'LINK' => ADMIN_URL."supplier-orders/supplier-order-detail.php?id=".$this->id,
        'USER_ID' => $this->sup_id,
        'CMD_NUMBER' => $this->order_id,
        'CART_HTML' => $cart_html
      )
    ));
    $mail->send();
  }
  
  public function sendPartnerMail() {
    $supplier_email = !empty($this->supplier->econtact) ? $this->supplier->econtact : $this->supplier->email;
    
    // prospect's mail
    $Cc = "";
    if (!empty($this->supplier->econtact))
      $Cc .= $this->supplier->pcontact." ".$this->supplier->ncontact."<".$this->supplier->econtact.">";

    if (!empty($this->supplier->contacts))
      foreach ($this->supplier->contacts as $contact)
        if(!empty($contact['email']))
          $Cc .= !empty($Cc) ? ", ".$contact['prenom']." ".$contact['nom']."<".$contact['email'].">" : $contact['prenom']." ".$contact['nom']."<".$contact['email'].">";

    $Cc = !empty($Cc) ? "Cc:".$Cc."\n" : "";

	/*
    $mail = new Email(array(
      'email' => $supplier_email,
      'subject' => "Passation de commande n°".$this->rid,
      'headers' => "From: Service Achat Techni-Contact <achat@techni-contact.com>\n".$Cc."Reply-To: Service Achat Techni-Contact <achat@techni-contact.com>\r\n",
      'template' => 'advertiser-bo_commandes-envoi_commande',
      'data' => array(
        'ADVERTISER_LOGIN' => $this->supplier->extranet_user->login,
        'ADVERTISER_PASSWORD' => $this->supplier->extranet_user->pass,
        'LINK' => EXTRANET_URL,
        'CMD_NUMBER' => $this->rid,
      )
    ));*/
	
	//Changed on 18/11/2014 to connect the user directly
	$mail = new Email(array(
      'email' => $supplier_email,
      'subject' => "Passation de commande n°".$this->rid,
      'headers' => "From: Service Achat Techni-Contact <achat@techni-contact.com>\n".$Cc."Reply-To: Service Achat Techni-Contact <achat@techni-contact.com>\r\n",
      'template' => 'advertiser-bo_commandes-envoi_commande',
      'data' => array(
        'LINK' => EXTRANET_URL,
        'CMD_NUMBER' => $this->rid,
		'AVERTISER_UID' => $this->supplier->extranet_user->webpass,
      )
    ));
	
	$id_pdt  =  explode('-',$this->rid);
	
	$sql_order_line  = "SELECT pdt_id
					    FROM order_line 
						WHERE order_id='".$id_pdt[1]."'
						AND   sup_id='".$id_pdt[0]."'";
	$req_order_line  =  mysql_query($sql_order_line);
	$data_order_line =  mysql_fetch_object($req_order_line);
	
	
	$sql_id_adv   =  "SELECT idAdvertiser 
					  FROM   `products` 
					  WHERE id='".$data_order_line->pdt_id."' ";
	$req_id_adv   =   mysql_query($sql_id_adv);
	$data_id_adv  =   mysql_fetch_object($req_id_adv);
	
	$sql_adv      =  "SELECT direct_link_printable_orders
					  FROM advertisers
					  WHERE id='".$data_id_adv->idAdvertiser."' ";
	$req_adv      =   mysql_query($sql_adv);
	$data_adv     =   mysql_fetch_object($req_adv);
	  
	if($data_adv->direct_link_printable_orders == 1){
		$mail = new Email(array(
			  'email' => $supplier_email,
			  'subject' => "Passation de commande n°".$this->rid,
			  'headers' => "From: Service Achat Techni-Contact <achat@techni-contact.com>\n Bcc:commandes@techni-contact.com\r\n Reply-To: Service Achat Techni-Contact <achat@techni-contact.com>\r\n",
			  'template' => 'advertiser-ordre-fournisseur-alternatif',
			  'data' => array(
				'LINK' => EXTRANET_URL,
				'CMD_NUMBER' => $this->rid,
				'AVERTISER_UID' => $this->supplier->extranet_user->webpass,
			  )
		));
	}
    $mail->send();
  }
  
  public function sendForecastShippingDateFixedByPartnerEmail() {
    $mail = new Email(array(
      'email' => 'commandes@techni-contact.com',
      'subject' => $this->supplier->nom1." a fixé une date d'expédition pour l'ordre n°".$this->rid,
      'headers' => "From: Ordre fournisseur<".$this->supplier->email.">\nReply-To: ".$this->supplier->nom1."<".$this->supplier->email.">\r\n",
      'template' => 'advertiser-extranet_order-update_delivery_date',
      'data' => array(
        'EXP_DATE' => date('d/m/Y - H:i:s'),
        'SUPPLIER_NAME' => $this->supplier->nom1,
        'ORDRE_NUMBER' => $this->rid,
        'LIEN_ORDRE' => ADMIN_URL.'supplier-orders/supplier-order-detail.php?id='.$this->id,
        'LIEN_CMD' => ADMIN_URL.'orders/order-detail.php?id='.$this->order_id,
        'DATE_EXPEDITION' => $this->order->forecast_shipping_text,
      )
    ));
    $mail->send();
  }
  
  private function sendOrderCancelledEmail() {
    $mail = new Email(array(
      'email' => $this->supplier->email,
      'subject' => "Annulation de la commande ".$this->rid,
      'headers' => "From: Service Achat Techni-Contact <achat@techni-contact.com>\nReply-To: Service Achat Techni-Contact <achat@techni-contact.com>\r\n",
      'template' => 'advertiser-bo_orders-order_cancelled',
      'data' => array(
        'LINK' => EXTRANET_URL."commande.html?idCommande=".$this->rid,
        'CMD_NUMBER' => $this->rid,
        'CANCEL_MOTIVE' => $this->cancellation_reason
      )
    ));
    $mail->send();
  }
  
  public function getProcessingStatusStateText() {
    switch ($this->processing_status) {
      case self::PROCESSING_STATUS_FORECAST_SHIPPING_DATE:
        return $this->forecast_shipping_text;
      case self::PROCESSING_STATUS_CANCELLED:
        return $this->cancellation_reason;
    }
    return "";
  }
  
  const PROCESSING_STATUS_WAITING_PAYMENT_VALIDATION = 0;
  const PROCESSING_STATUS_NOT_VIEWED = 2;
  const PROCESSING_STATUS_WAITING_ARC = 3;
  const PROCESSING_STATUS_ARC_RECEIVED = 4;
  const PROCESSING_STATUS_WAITING_PROCESSING = 10;
  const PROCESSING_STATUS_PROCESSING = 20;
  const PROCESSING_STATUS_FORECAST_SHIPPING_DATE = 25;
  const PROCESSING_STATUS_PARTLY_SHIPPED = 30;
  const PROCESSING_STATUS_SHIPPED = 40;
  const PROCESSING_STATUS_WAITING_INFOS = 100;
  const PROCESSING_STATUS_CANCELLED = 101;
  public static $processingStatusList = array(
    self::PROCESSING_STATUS_WAITING_PAYMENT_VALIDATION => "Attente validation paiement",
    self::PROCESSING_STATUS_NOT_VIEWED => "Non encore consultée",
    self::PROCESSING_STATUS_WAITING_ARC => "Attente AR fournisseur",
    self::PROCESSING_STATUS_ARC_RECEIVED => "AR commande reçu",
    self::PROCESSING_STATUS_WAITING_PROCESSING => "Commande en attente de traitement",
    self::PROCESSING_STATUS_PROCESSING => "Commande en cours de traitement",
    self::PROCESSING_STATUS_FORECAST_SHIPPING_DATE => "Date d’expédition fixée",
    self::PROCESSING_STATUS_PARTLY_SHIPPED => "Commande partiellement expédiée",
    self::PROCESSING_STATUS_SHIPPED => "Commande expédiée",
    self::PROCESSING_STATUS_WAITING_INFOS => "Attente d'information supp.",
    self::PROCESSING_STATUS_CANCELLED => "Commande annulée"
  );
  public static function getProcessingStatusText($const) {
    return isset(self::$processingStatusList[$const]) ? self::$processingStatusList[$const] : "";
  }
  public static $editableProcessingStatusList = array(
    self::PROCESSING_STATUS_NOT_VIEWED => "Non encore consultée",
    self::PROCESSING_STATUS_WAITING_ARC => "Attente AR fournisseur",
    self::PROCESSING_STATUS_ARC_RECEIVED => "AR commande reçu",
    self::PROCESSING_STATUS_FORECAST_SHIPPING_DATE => "Date d’expédition fixée",
    self::PROCESSING_STATUS_CANCELLED => "Commande annulée"
  );

  const WAITING_INFO_NO = 0;
  const WAITING_INFO_YES = 1;
  public static $w8InfoList = array(
    self::WAITING_INFO_NO => "Non",
    self::WAITING_INFO_YES => "Oui"
  );
  public static function getSavText($const) {
    return isset(self::$w8InfoList[$const]) ? self::$w8InfoList[$const] : "";
  }
  
}