<?php

/**
 * Commandes
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Commandes extends BaseCommandes
{
  public function setUp() {
    parent::setUp();
    $this->hasOne('Clients as client', array(
        'local' => 'idClient',
        'foreign' => 'id'
      )
    );
  }
  
  public function generateId() {
    $this->id = mt_rand(0,0xffffffff);
  }
  
  /*public function preSave($event) {
    // prevents from updating user account from here
    $this->clearRelated("created_user");
    $this->clearRelated("updated_user");
    
    // TODO do it in the js
    $pdtCntPerAdv = array();
    foreach ($this->lines as $line) {
      if ($line->pdt_ref_id != 0)
        $pdtCntPerAdv[$line->pdt_ref->product->idAdvertiser] += $line->total_ht;
      elseif ($line->pdt_ref_hidden_id != 0)
        $pdtCntPerAdv[$line->pdt_ref_hidden->sup_id] += $line->total_ht;
    }
    arsort($pdtCntPerAdv);
    $key = key($pdtCntPerAdv);
    $this->main_sup_id = isset($key) ? $key : 0;
    
  }

  public function preInsert($event) {
    global $user;
    $this->created = time();
    $this->updated = time();
    $this->created_user_id = $user->id;
    $this->updated_user_id = $user->id;
    // auto generate an id if none are present
    if (!$this->id)
      $this->generateId();
  }

  public function preUpdate($event) {
    global $user;
    $this->updated = time();
    $this->updated_user_id = $user->id;
    switch ($this->status) {
      case self::STATUS_SENT:
        // TODO lien avec devis fournisseur
        //__LEAD_P_STATUS_PROCESSED__
        $in = new InternalNotes();
        $in->id_reference = $this->id;
        $in->context = InternalNotes::ESTIMATE;
        $in->content = "Devis n°".$this->id." envoyé au client le ".date("d/m/Y H:i:s", $this->updated)." par ".$user->login;
        $in->save();
        $mail = new Email(array(
          "email" => $user->email,
          "subject" => "Votre devis Techni-Contact n°".$this->id,
          "headers" => "From: Techni-Contact - ".$user->name." <".$user->login.">\nReply-To: Service client Techni-Contact <".$user->email.">\r\n",
          "template" => "user-bo_estimates-sent",
          "data" => array(
            "CLIENT_FIRSTNAME" => $this->prenom,
            "CLIENT_LASTNAME" => $this->nom,
            "ESTIMATE_LINK" => "",
            "ESTIMATE_VALIDITY" => $this->validity,
            "ESTIMATE_PAYMENT_MODE" => self::getPaymentModeText($this->payment_mode),
            "CLIENT_FO_ACCOUNT_LINK" => COMPTE_URL."login.html",
            "OPERATOR_NAME" => $user->name,
            "OPERATOR_PHONE" => $user->phone,
            "CLIENT_FO_ACCOUNT_ESTI_LINK" => "#"
          )
        ));
        $mail->send();
        break;
      case self::STATUS_UPDATED:
        $in = new InternalNotes();
        $in->id_reference = $this->id;
        $in->context = InternalNotes::ESTIMATE;
        $in->content = "Devis mis à jour et renvoyé au client le ".date("d/m/Y H:i:s", $this->updated)." par ".$user->login;
        $in->save();
        $mail = new Email(array(
          "email" => $user->email,
          "subject" => "Mise à jour de votre devis Techni-Contact",
          "headers" => "From: Techni-Contact - ".$user->name." <".$user->login.">\nReply-To: Service client Techni-Contact <".$user->email.">\r\n",
          "template" => "user-bo_estimates-updated",
          "data" => array(
            "CLIENT_FIRSTNAME" => $this->prenom,
            "CLIENT_LASTNAME" => $this->nom,
            "ESTIMATE_LINK" => "",
            "ESTIMATE_VALIDITY" => $this->validity,
            "ESTIMATE_PAYMENT_MODE" => self::getPaymentModeText($this->payment_mode),
            "CLIENT_FO_ACCOUNT_LINK" => COMPTE_URL."login.html",
            "OPERATOR_NAME" => $user->name,
            "OPERATOR_PHONE" => $user->phone,
            "CLIENT_FO_ACCOUNT_ESTI_LINK" => "#"
          )
        ));
        $mail->send();
        break;
    }
  }
  
  public function resend() {
    if ($this->status != self::STATUS_IN_PROCESS) {
      global $user;
      $in = new InternalNotes();
      $in->id_reference = $this->id;
      $in->context = InternalNotes::ESTIMATE;
      $in->content = "Devis n°".$this->id." de ".$this->total_ht." euros renvoyé au client le ".date("d/m/Y H:i:s");
      $in->save();
      $mail = new Email(array(
        "email" => $user->email,
        "subject" => "Votre devis Techni-Contact n°".$this->id,
        "headers" => "From: Techni-Contact - ".$user->name." <".$user->login.">\nReply-To: Service client Techni-Contact <".$user->email.">\r\n",
        "template" => "user-bo_estimates-sent",
        "data" => array(
          "CLIENT_FIRSTNAME" => $this->prenom,
          "CLIENT_LASTNAME" => $this->nom,
          "ESTIMATE_LINK" => "",
          "ESTIMATE_VALIDITY" => $this->validity,
          "ESTIMATE_PAYMENT_MODE" => self::getPaymentModeText($this->payment_mode),
          "CLIENT_FO_ACCOUNT_LINK" => COMPTE_URL."login.html",
          "OPERATOR_NAME" => $user->name,
          "OPERATOR_PHONE" => $user->phone,
          "CLIENT_FO_ACCOUNT_ESTI_LINK" => "#"
        )
      ));
      $mail->send();
      return 1;
    }
    return 0;
  }*/
  
  const TYPE_INTERNET = 0;
  const TYPE_ESTIMATE = 1;
  const TYPE_PHONE = 2;
  const TYPE_FAX = 3;
  const TYPE_MAIL = 4;
  public static $typeList = array(
    self::TYPE_INTERNET => "Internet",
    self::TYPE_ESTIMATE => "Devis",
    self::TYPE_PHONE => "Tel",
    self::TYPE_FAX => "Fax",
    self::TYPE_MAIL => "Courrier"
  );
  public static function getTypeText($const) {
    return isset(self::$activityList[$const]) ? self::$activityList[$const] : "";
  }
  
  const PAYMENT_MEAN_BC_TBD = 0;
  const PAYMENT_MEAN_BC_CB = 1;
  const PAYMENT_MEAN_BC_VISA = 2;
  const PAYMENT_MEAN_BC_MASTERCARD = 3;
  const PAYMENT_MEAN_BC_AMEX = 4;
  const PAYMENT_MEAN_PAYPAL = 5;
  const PAYMENT_MEAN_CHEQUE = 10;
  const PAYMENT_MEAN_VIREMENT = 20;
  const PAYMENT_MEAN_DIFFERE = 30;
  const PAYMENT_MEAN_CB = 40;
  const PAYMENT_MEAN_MANDAT = 50;
  public static $paymentMeanList = array(
    self::PAYMENT_MEAN_BC_TBD => "Carte Bancaire (type en attente)",
    self::PAYMENT_MEAN_BC_CB => "Carte Bancaire (Carte Bleue)",
    self::PAYMENT_MEAN_BC_VISA => "Carte Bancaire (Visa)",
    self::PAYMENT_MEAN_BC_MASTERCARD => "Carte Bancaire (Mastercard)",
    self::PAYMENT_MEAN_BC_AMEX => "Carte Bancaire (American Express)",
    self::PAYMENT_MEAN_PAYPAL => "Paypal",
    self::PAYMENT_MEAN_CHEQUE => "Chèque",
    self::PAYMENT_MEAN_VIREMENT => "Virement bancaire",
    self::PAYMENT_MEAN_DIFFERE => "Paiement différé)",
    self::PAYMENT_MEAN_CB => "Contre-remboursement",
    self::PAYMENT_MEAN_MANDAT => "Mandat administratif"
  );
  public static function getPaymentMeanText($const) {
    return isset(self::$paymentMeanList[$const]) ? self::$paymentMeanList[$const] : "";
  }
  
  const PAYMENT_STATUS_WAITING_BANC_CONFIRMATION = 0;
  const PAYMENT_STATUS_WAITING_CHECK = 1;
  const PAYMENT_STATUS_WAITING_TRANSFER = 2;
  const PAYMENT_STATUS_DEFERRED_TO_VALIDATE = 3;
  const PAYMENT_STATUS_CASH_ON_DELIVERY_TO_VALIDATE = 4;
  const PAYMENT_STATUS_MONEY_ORDER_TO_VALIDATE = 5;
  const PAYMENT_STATUS_PAID = 10;
  const PAYMENT_STATUS_DEFERRED_VALIDATED = 11;
  public static $paymentStatusList = array(
    self::PAYMENT_STATUS_WAITING_BANC_CONFIRMATION => "Attente confirmation BNP",
    self::PAYMENT_STATUS_WAITING_CHECK => "Attente chèque",
    self::PAYMENT_STATUS_WAITING_TRANSFER => "Attente virement",
    self::PAYMENT_STATUS_DEFERRED_TO_VALIDATE => "Paiement différé à valider",
    self::PAYMENT_STATUS_CASH_ON_DELIVERY_TO_VALIDATE => "Paiement par contre-remboursement à valider",
    self::PAYMENT_STATUS_MONEY_ORDER_TO_VALIDATE => "Paiement par mandat administratif à valider",
    self::PAYMENT_STATUS_PAID => "Payé",
    self::PAYMENT_STATUS_DEFERRED_VALIDATED => "Paiement différé validé"
  );
  public static function getPaymentStatusText($const) {
    return isset(self::$paymentStatusList[$const]) ? self::$paymentStatusList[$const] : "";
  }

  const PROCESSING_STATUS_WAITING_PAYMENT_VALIDATION = 0;
  const PROCESSING_STATUS_NOT_VIEWED = 10;
  const PROCESSING_STATUS_PROCESSING = 20;
  const PROCESSING_STATUS_SHIPPED = 30;
  public static $processingStatusList = array(
    self::PROCESSING_STATUS_WAITING_PAYMENT_VALIDATION => "Attente validation paiement",
    self::PROCESSING_STATUS_NOT_VIEWED => "Commande reçue non consultée",
    self::PROCESSING_STATUS_PROCESSING => "Commande en cours de traitement",
    self::PROCESSING_STATUS_SHIPPED => "Commande expédiée"
  );
  public static function getProcessingStatusText($const) {
    return isset(self::$processingStatusList[$const]) ? self::$processingStatusList[$const] : "";
  }

  const GLOBAL_PROCESSING_STATUS_WAITING_PAYMENT_VALIDATION = 0;
  const GLOBAL_PROCESSING_STATUS_WAITING_PROCESSING = 10;
  const GLOBAL_PROCESSING_STATUS_PROCESSING = 20;
  const GLOBAL_PROCESSING_STATUS_ASS_OPEN = 21;
  const GLOBAL_PROCESSING_STATUS_ASS_CLOSED = 22;
  const GLOBAL_PROCESSING_STATUS_PROJECTED_SHIPPING_DATE = 25;
  const GLOBAL_PROCESSING_STATUS_PARTLY_SHIPPED = 30;
  const GLOBAL_PROCESSING_STATUS_SHIPPED = 40;
  const GLOBAL_PROCESSING_STATUS_PARTLY_CANCELED = 90;
  const GLOBAL_PROCESSING_STATUS_CANCELED = 99;
  public static $globalProcessingStatusList = array(
    self::GLOBAL_PROCESSING_STATUS_WAITING_PAYMENT_VALIDATION => "Attente validation paiement",
    self::GLOBAL_PROCESSING_STATUS_WAITING_PROCESSING => "Commande en attente de traitement",
    self::GLOBAL_PROCESSING_STATUS_PROCESSING => "Commande en cours de traitement",
    self::GLOBAL_PROCESSING_STATUS_ASS_OPEN => "SAV ouvert",
    self::GLOBAL_PROCESSING_STATUS_ASS_CLOSED => "SAV résolu",
    self::GLOBAL_PROCESSING_STATUS_PROJECTED_SHIPPING_DATE => "Date d'expédition prévisionnelle",
    self::GLOBAL_PROCESSING_STATUS_PARTLY_SHIPPED => "Commande partiellement expédiée",
    self::GLOBAL_PROCESSING_STATUS_SHIPPED => "Commande expédiée",
    self::GLOBAL_PROCESSING_STATUS_PARTLY_CANCELED => "Commande partiellement annulée",
    self::GLOBAL_PROCESSING_STATUS_CANCELED => "Commande annulée"
  );
  public static function getGlobalProcessingStatus($const) {
    return isset(self::$globalProcessingStatusList[$const]) ? self::$globalProcessingStatusList[$const] : "";
  }
  
}